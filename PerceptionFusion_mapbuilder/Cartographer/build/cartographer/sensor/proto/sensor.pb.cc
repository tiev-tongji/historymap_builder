// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/sensor/proto/sensor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/sensor/proto/sensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace sensor {
namespace proto {
class CompressedPointCloudDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CompressedPointCloud>
     _instance;
} _CompressedPointCloud_default_instance_;
class ImuDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImuData>
     _instance;
} _ImuData_default_instance_;
class CompressedRangeDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CompressedRangeData>
     _instance;
} _CompressedRangeData_default_instance_;
class OdometryDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OdometryData>
     _instance;
} _OdometryData_default_instance_;
class FixedFramePoseDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FixedFramePoseData>
     _instance;
} _FixedFramePoseData_default_instance_;

namespace protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedPointCloud, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedPointCloud, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedPointCloud, num_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedPointCloud, point_data_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, linear_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, angular_velocity_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedRangeData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedRangeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedRangeData, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedRangeData, returns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedRangeData, misses_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, pose_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedFramePoseData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedFramePoseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedFramePoseData, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedFramePoseData, pose_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(CompressedPointCloud)},
  { 9, 17, sizeof(ImuData)},
  { 20, 28, sizeof(CompressedRangeData)},
  { 31, 38, sizeof(OdometryData)},
  { 40, 47, sizeof(FixedFramePoseData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CompressedPointCloud_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImuData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CompressedRangeData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OdometryData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FixedFramePoseData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/sensor/proto/sensor.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::cartographer::transform::proto::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaults();
  _CompressedPointCloud_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CompressedPointCloud_default_instance_);_ImuData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImuData_default_instance_);_CompressedRangeData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CompressedRangeData_default_instance_);_OdometryData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OdometryData_default_instance_);_FixedFramePoseData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FixedFramePoseData_default_instance_);_ImuData_default_instance_._instance.get_mutable()->linear_acceleration_ = const_cast< ::cartographer::transform::proto::Vector3d*>(
      ::cartographer::transform::proto::Vector3d::internal_default_instance());
  _ImuData_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::cartographer::transform::proto::Vector3d*>(
      ::cartographer::transform::proto::Vector3d::internal_default_instance());
  _CompressedRangeData_default_instance_._instance.get_mutable()->origin_ = const_cast< ::cartographer::transform::proto::Vector3f*>(
      ::cartographer::transform::proto::Vector3f::internal_default_instance());
  _CompressedRangeData_default_instance_._instance.get_mutable()->returns_ = const_cast< ::cartographer::sensor::proto::CompressedPointCloud*>(
      ::cartographer::sensor::proto::CompressedPointCloud::internal_default_instance());
  _CompressedRangeData_default_instance_._instance.get_mutable()->misses_ = const_cast< ::cartographer::sensor::proto::CompressedPointCloud*>(
      ::cartographer::sensor::proto::CompressedPointCloud::internal_default_instance());
  _OdometryData_default_instance_._instance.get_mutable()->pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
  _FixedFramePoseData_default_instance_._instance.get_mutable()->pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n&cartographer/sensor/proto/sensor.proto"
      "\022\031cartographer.sensor.proto\032,cartographe"
      "r/transform/proto/transform.proto\"B\n\024Com"
      "pressedPointCloud\022\022\n\nnum_points\030\001 \001(\005\022\026\n"
      "\npoint_data\030\003 \003(\005B\002\020\001\"\243\001\n\007ImuData\022\021\n\ttim"
      "estamp\030\001 \001(\003\022C\n\023linear_acceleration\030\002 \001("
      "\0132&.cartographer.transform.proto.Vector3"
      "d\022@\n\020angular_velocity\030\003 \001(\0132&.cartograph"
      "er.transform.proto.Vector3d\"\320\001\n\023Compress"
      "edRangeData\0226\n\006origin\030\001 \001(\0132&.cartograph"
      "er.transform.proto.Vector3f\022@\n\007returns\030\002"
      " \001(\0132/.cartographer.sensor.proto.Compres"
      "sedPointCloud\022\?\n\006misses\030\003 \001(\0132/.cartogra"
      "pher.sensor.proto.CompressedPointCloud\"V"
      "\n\014OdometryData\022\021\n\ttimestamp\030\001 \001(\003\0223\n\004pos"
      "e\030\002 \001(\0132%.cartographer.transform.proto.R"
      "igid3d\"\\\n\022FixedFramePoseData\022\021\n\ttimestam"
      "p\030\001 \001(\003\0223\n\004pose\030\002 \001(\0132%.cartographer.tra"
      "nsform.proto.Rigid3dB\010B\006Sensor"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 750);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/sensor/proto/sensor.proto", &protobuf_RegisterTypes);
  ::cartographer::transform::proto::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompressedPointCloud::kNumPointsFieldNumber;
const int CompressedPointCloud::kPointDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompressedPointCloud::CompressedPointCloud()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.CompressedPointCloud)
}
CompressedPointCloud::CompressedPointCloud(const CompressedPointCloud& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      point_data_(from.point_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_points_ = from.num_points_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.CompressedPointCloud)
}

void CompressedPointCloud::SharedCtor() {
  _cached_size_ = 0;
  num_points_ = 0;
}

CompressedPointCloud::~CompressedPointCloud() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.CompressedPointCloud)
  SharedDtor();
}

void CompressedPointCloud::SharedDtor() {
}

void CompressedPointCloud::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompressedPointCloud::descriptor() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CompressedPointCloud& CompressedPointCloud::default_instance() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

CompressedPointCloud* CompressedPointCloud::New(::google::protobuf::Arena* arena) const {
  CompressedPointCloud* n = new CompressedPointCloud;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompressedPointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.CompressedPointCloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_data_.Clear();
  num_points_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CompressedPointCloud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.CompressedPointCloud)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 point_data = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_point_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_point_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.CompressedPointCloud)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.CompressedPointCloud)
  return false;
#undef DO_
}

void CompressedPointCloud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.CompressedPointCloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_points = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_points(), output);
  }

  // repeated int32 point_data = 3 [packed = true];
  if (this->point_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _point_data_cached_byte_size_));
  }
  for (int i = 0, n = this->point_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->point_data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.CompressedPointCloud)
}

::google::protobuf::uint8* CompressedPointCloud::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.CompressedPointCloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_points = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_points(), target);
  }

  // repeated int32 point_data = 3 [packed = true];
  if (this->point_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _point_data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->point_data_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.CompressedPointCloud)
  return target;
}

size_t CompressedPointCloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.CompressedPointCloud)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 point_data = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->point_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _point_data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // optional int32 num_points = 1;
  if (has_num_points()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_points());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressedPointCloud::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.CompressedPointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  const CompressedPointCloud* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompressedPointCloud>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.CompressedPointCloud)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.CompressedPointCloud)
    MergeFrom(*source);
  }
}

void CompressedPointCloud::MergeFrom(const CompressedPointCloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.CompressedPointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_data_.MergeFrom(from.point_data_);
  if (from.has_num_points()) {
    set_num_points(from.num_points());
  }
}

void CompressedPointCloud::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.CompressedPointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedPointCloud::CopyFrom(const CompressedPointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.CompressedPointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedPointCloud::IsInitialized() const {
  return true;
}

void CompressedPointCloud::Swap(CompressedPointCloud* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompressedPointCloud::InternalSwap(CompressedPointCloud* other) {
  using std::swap;
  point_data_.InternalSwap(&other->point_data_);
  swap(num_points_, other->num_points_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompressedPointCloud::GetMetadata() const {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompressedPointCloud

// optional int32 num_points = 1;
bool CompressedPointCloud::has_num_points() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CompressedPointCloud::set_has_num_points() {
  _has_bits_[0] |= 0x00000001u;
}
void CompressedPointCloud::clear_has_num_points() {
  _has_bits_[0] &= ~0x00000001u;
}
void CompressedPointCloud::clear_num_points() {
  num_points_ = 0;
  clear_has_num_points();
}
::google::protobuf::int32 CompressedPointCloud::num_points() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.CompressedPointCloud.num_points)
  return num_points_;
}
void CompressedPointCloud::set_num_points(::google::protobuf::int32 value) {
  set_has_num_points();
  num_points_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.CompressedPointCloud.num_points)
}

// repeated int32 point_data = 3 [packed = true];
int CompressedPointCloud::point_data_size() const {
  return point_data_.size();
}
void CompressedPointCloud::clear_point_data() {
  point_data_.Clear();
}
::google::protobuf::int32 CompressedPointCloud::point_data(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.CompressedPointCloud.point_data)
  return point_data_.Get(index);
}
void CompressedPointCloud::set_point_data(int index, ::google::protobuf::int32 value) {
  point_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.CompressedPointCloud.point_data)
}
void CompressedPointCloud::add_point_data(::google::protobuf::int32 value) {
  point_data_.Add(value);
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.CompressedPointCloud.point_data)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CompressedPointCloud::point_data() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.CompressedPointCloud.point_data)
  return point_data_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CompressedPointCloud::mutable_point_data() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.CompressedPointCloud.point_data)
  return &point_data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImuData::kTimestampFieldNumber;
const int ImuData::kLinearAccelerationFieldNumber;
const int ImuData::kAngularVelocityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImuData::ImuData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.ImuData)
}
ImuData::ImuData(const ImuData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_linear_acceleration()) {
    linear_acceleration_ = new ::cartographer::transform::proto::Vector3d(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = NULL;
  }
  if (from.has_angular_velocity()) {
    angular_velocity_ = new ::cartographer::transform::proto::Vector3d(*from.angular_velocity_);
  } else {
    angular_velocity_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.ImuData)
}

void ImuData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&linear_acceleration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&linear_acceleration_)) + sizeof(timestamp_));
}

ImuData::~ImuData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.ImuData)
  SharedDtor();
}

void ImuData::SharedDtor() {
  if (this != internal_default_instance()) delete linear_acceleration_;
  if (this != internal_default_instance()) delete angular_velocity_;
}

void ImuData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImuData::descriptor() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImuData& ImuData::default_instance() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImuData* ImuData::New(::google::protobuf::Arena* arena) const {
  ImuData* n = new ImuData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImuData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.ImuData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(linear_acceleration_ != NULL);
      linear_acceleration_->::cartographer::transform::proto::Vector3d::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(angular_velocity_ != NULL);
      angular_velocity_->::cartographer::transform::proto::Vector3d::Clear();
    }
  }
  timestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImuData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.ImuData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.transform.proto.Vector3d linear_acceleration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.transform.proto.Vector3d angular_velocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.ImuData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.ImuData)
  return false;
#undef DO_
}

void ImuData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.ImuData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .cartographer.transform.proto.Vector3d linear_acceleration = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->linear_acceleration_, output);
  }

  // optional .cartographer.transform.proto.Vector3d angular_velocity = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->angular_velocity_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.ImuData)
}

::google::protobuf::uint8* ImuData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.ImuData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional .cartographer.transform.proto.Vector3d linear_acceleration = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->linear_acceleration_, deterministic, target);
  }

  // optional .cartographer.transform.proto.Vector3d angular_velocity = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->angular_velocity_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.ImuData)
  return target;
}

size_t ImuData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.ImuData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .cartographer.transform.proto.Vector3d linear_acceleration = 2;
    if (has_linear_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->linear_acceleration_);
    }

    // optional .cartographer.transform.proto.Vector3d angular_velocity = 3;
    if (has_angular_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->angular_velocity_);
    }

    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImuData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.ImuData)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImuData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.ImuData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.ImuData)
    MergeFrom(*source);
  }
}

void ImuData::MergeFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.ImuData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_linear_acceleration()->::cartographer::transform::proto::Vector3d::MergeFrom(from.linear_acceleration());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_angular_velocity()->::cartographer::transform::proto::Vector3d::MergeFrom(from.angular_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImuData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuData::CopyFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuData::IsInitialized() const {
  return true;
}

void ImuData::Swap(ImuData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImuData::InternalSwap(ImuData* other) {
  using std::swap;
  swap(linear_acceleration_, other->linear_acceleration_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImuData::GetMetadata() const {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImuData

// optional int64 timestamp = 1;
bool ImuData::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImuData::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void ImuData::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImuData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 ImuData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.ImuData.timestamp)
  return timestamp_;
}
void ImuData::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.ImuData.timestamp)
}

// optional .cartographer.transform.proto.Vector3d linear_acceleration = 2;
bool ImuData::has_linear_acceleration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImuData::set_has_linear_acceleration() {
  _has_bits_[0] |= 0x00000001u;
}
void ImuData::clear_has_linear_acceleration() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImuData::clear_linear_acceleration() {
  if (linear_acceleration_ != NULL) linear_acceleration_->::cartographer::transform::proto::Vector3d::Clear();
  clear_has_linear_acceleration();
}
const ::cartographer::transform::proto::Vector3d& ImuData::linear_acceleration() const {
  const ::cartographer::transform::proto::Vector3d* p = linear_acceleration_;
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.ImuData.linear_acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Vector3d*>(
      &::cartographer::transform::proto::_Vector3d_default_instance_);
}
::cartographer::transform::proto::Vector3d* ImuData::mutable_linear_acceleration() {
  set_has_linear_acceleration();
  if (linear_acceleration_ == NULL) {
    linear_acceleration_ = new ::cartographer::transform::proto::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.ImuData.linear_acceleration)
  return linear_acceleration_;
}
::cartographer::transform::proto::Vector3d* ImuData::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.ImuData.linear_acceleration)
  clear_has_linear_acceleration();
  ::cartographer::transform::proto::Vector3d* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
void ImuData::set_allocated_linear_acceleration(::cartographer::transform::proto::Vector3d* linear_acceleration) {
  delete linear_acceleration_;
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    set_has_linear_acceleration();
  } else {
    clear_has_linear_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.ImuData.linear_acceleration)
}

// optional .cartographer.transform.proto.Vector3d angular_velocity = 3;
bool ImuData::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImuData::set_has_angular_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
void ImuData::clear_has_angular_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImuData::clear_angular_velocity() {
  if (angular_velocity_ != NULL) angular_velocity_->::cartographer::transform::proto::Vector3d::Clear();
  clear_has_angular_velocity();
}
const ::cartographer::transform::proto::Vector3d& ImuData::angular_velocity() const {
  const ::cartographer::transform::proto::Vector3d* p = angular_velocity_;
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.ImuData.angular_velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Vector3d*>(
      &::cartographer::transform::proto::_Vector3d_default_instance_);
}
::cartographer::transform::proto::Vector3d* ImuData::mutable_angular_velocity() {
  set_has_angular_velocity();
  if (angular_velocity_ == NULL) {
    angular_velocity_ = new ::cartographer::transform::proto::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.ImuData.angular_velocity)
  return angular_velocity_;
}
::cartographer::transform::proto::Vector3d* ImuData::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.ImuData.angular_velocity)
  clear_has_angular_velocity();
  ::cartographer::transform::proto::Vector3d* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
void ImuData::set_allocated_angular_velocity(::cartographer::transform::proto::Vector3d* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    set_has_angular_velocity();
  } else {
    clear_has_angular_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.ImuData.angular_velocity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompressedRangeData::kOriginFieldNumber;
const int CompressedRangeData::kReturnsFieldNumber;
const int CompressedRangeData::kMissesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompressedRangeData::CompressedRangeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.CompressedRangeData)
}
CompressedRangeData::CompressedRangeData(const CompressedRangeData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::cartographer::transform::proto::Vector3f(*from.origin_);
  } else {
    origin_ = NULL;
  }
  if (from.has_returns()) {
    returns_ = new ::cartographer::sensor::proto::CompressedPointCloud(*from.returns_);
  } else {
    returns_ = NULL;
  }
  if (from.has_misses()) {
    misses_ = new ::cartographer::sensor::proto::CompressedPointCloud(*from.misses_);
  } else {
    misses_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.CompressedRangeData)
}

void CompressedRangeData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&misses_) -
      reinterpret_cast<char*>(&origin_)) + sizeof(misses_));
}

CompressedRangeData::~CompressedRangeData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.CompressedRangeData)
  SharedDtor();
}

void CompressedRangeData::SharedDtor() {
  if (this != internal_default_instance()) delete origin_;
  if (this != internal_default_instance()) delete returns_;
  if (this != internal_default_instance()) delete misses_;
}

void CompressedRangeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompressedRangeData::descriptor() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CompressedRangeData& CompressedRangeData::default_instance() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

CompressedRangeData* CompressedRangeData::New(::google::protobuf::Arena* arena) const {
  CompressedRangeData* n = new CompressedRangeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompressedRangeData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.CompressedRangeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(origin_ != NULL);
      origin_->::cartographer::transform::proto::Vector3f::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(returns_ != NULL);
      returns_->::cartographer::sensor::proto::CompressedPointCloud::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(misses_ != NULL);
      misses_->::cartographer::sensor::proto::CompressedPointCloud::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CompressedRangeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.CompressedRangeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.transform.proto.Vector3f origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.sensor.proto.CompressedPointCloud returns = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_returns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.sensor.proto.CompressedPointCloud misses = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_misses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.CompressedRangeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.CompressedRangeData)
  return false;
#undef DO_
}

void CompressedRangeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.CompressedRangeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cartographer.transform.proto.Vector3f origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud returns = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->returns_, output);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud misses = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->misses_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.CompressedRangeData)
}

::google::protobuf::uint8* CompressedRangeData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.CompressedRangeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cartographer.transform.proto.Vector3f origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, deterministic, target);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud returns = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->returns_, deterministic, target);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud misses = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->misses_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.CompressedRangeData)
  return target;
}

size_t CompressedRangeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.CompressedRangeData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .cartographer.transform.proto.Vector3f origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional .cartographer.sensor.proto.CompressedPointCloud returns = 2;
    if (has_returns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->returns_);
    }

    // optional .cartographer.sensor.proto.CompressedPointCloud misses = 3;
    if (has_misses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->misses_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressedRangeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.CompressedRangeData)
  GOOGLE_DCHECK_NE(&from, this);
  const CompressedRangeData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompressedRangeData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.CompressedRangeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.CompressedRangeData)
    MergeFrom(*source);
  }
}

void CompressedRangeData::MergeFrom(const CompressedRangeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.CompressedRangeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::cartographer::transform::proto::Vector3f::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_returns()->::cartographer::sensor::proto::CompressedPointCloud::MergeFrom(from.returns());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_misses()->::cartographer::sensor::proto::CompressedPointCloud::MergeFrom(from.misses());
    }
  }
}

void CompressedRangeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.CompressedRangeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedRangeData::CopyFrom(const CompressedRangeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.CompressedRangeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedRangeData::IsInitialized() const {
  return true;
}

void CompressedRangeData::Swap(CompressedRangeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompressedRangeData::InternalSwap(CompressedRangeData* other) {
  using std::swap;
  swap(origin_, other->origin_);
  swap(returns_, other->returns_);
  swap(misses_, other->misses_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompressedRangeData::GetMetadata() const {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompressedRangeData

// optional .cartographer.transform.proto.Vector3f origin = 1;
bool CompressedRangeData::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CompressedRangeData::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void CompressedRangeData::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CompressedRangeData::clear_origin() {
  if (origin_ != NULL) origin_->::cartographer::transform::proto::Vector3f::Clear();
  clear_has_origin();
}
const ::cartographer::transform::proto::Vector3f& CompressedRangeData::origin() const {
  const ::cartographer::transform::proto::Vector3f* p = origin_;
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.CompressedRangeData.origin)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Vector3f*>(
      &::cartographer::transform::proto::_Vector3f_default_instance_);
}
::cartographer::transform::proto::Vector3f* CompressedRangeData::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::cartographer::transform::proto::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.CompressedRangeData.origin)
  return origin_;
}
::cartographer::transform::proto::Vector3f* CompressedRangeData::release_origin() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.CompressedRangeData.origin)
  clear_has_origin();
  ::cartographer::transform::proto::Vector3f* temp = origin_;
  origin_ = NULL;
  return temp;
}
void CompressedRangeData::set_allocated_origin(::cartographer::transform::proto::Vector3f* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.CompressedRangeData.origin)
}

// optional .cartographer.sensor.proto.CompressedPointCloud returns = 2;
bool CompressedRangeData::has_returns() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CompressedRangeData::set_has_returns() {
  _has_bits_[0] |= 0x00000002u;
}
void CompressedRangeData::clear_has_returns() {
  _has_bits_[0] &= ~0x00000002u;
}
void CompressedRangeData::clear_returns() {
  if (returns_ != NULL) returns_->::cartographer::sensor::proto::CompressedPointCloud::Clear();
  clear_has_returns();
}
const ::cartographer::sensor::proto::CompressedPointCloud& CompressedRangeData::returns() const {
  const ::cartographer::sensor::proto::CompressedPointCloud* p = returns_;
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.CompressedRangeData.returns)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::sensor::proto::CompressedPointCloud*>(
      &::cartographer::sensor::proto::_CompressedPointCloud_default_instance_);
}
::cartographer::sensor::proto::CompressedPointCloud* CompressedRangeData::mutable_returns() {
  set_has_returns();
  if (returns_ == NULL) {
    returns_ = new ::cartographer::sensor::proto::CompressedPointCloud;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.CompressedRangeData.returns)
  return returns_;
}
::cartographer::sensor::proto::CompressedPointCloud* CompressedRangeData::release_returns() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.CompressedRangeData.returns)
  clear_has_returns();
  ::cartographer::sensor::proto::CompressedPointCloud* temp = returns_;
  returns_ = NULL;
  return temp;
}
void CompressedRangeData::set_allocated_returns(::cartographer::sensor::proto::CompressedPointCloud* returns) {
  delete returns_;
  returns_ = returns;
  if (returns) {
    set_has_returns();
  } else {
    clear_has_returns();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.CompressedRangeData.returns)
}

// optional .cartographer.sensor.proto.CompressedPointCloud misses = 3;
bool CompressedRangeData::has_misses() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CompressedRangeData::set_has_misses() {
  _has_bits_[0] |= 0x00000004u;
}
void CompressedRangeData::clear_has_misses() {
  _has_bits_[0] &= ~0x00000004u;
}
void CompressedRangeData::clear_misses() {
  if (misses_ != NULL) misses_->::cartographer::sensor::proto::CompressedPointCloud::Clear();
  clear_has_misses();
}
const ::cartographer::sensor::proto::CompressedPointCloud& CompressedRangeData::misses() const {
  const ::cartographer::sensor::proto::CompressedPointCloud* p = misses_;
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.CompressedRangeData.misses)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::sensor::proto::CompressedPointCloud*>(
      &::cartographer::sensor::proto::_CompressedPointCloud_default_instance_);
}
::cartographer::sensor::proto::CompressedPointCloud* CompressedRangeData::mutable_misses() {
  set_has_misses();
  if (misses_ == NULL) {
    misses_ = new ::cartographer::sensor::proto::CompressedPointCloud;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.CompressedRangeData.misses)
  return misses_;
}
::cartographer::sensor::proto::CompressedPointCloud* CompressedRangeData::release_misses() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.CompressedRangeData.misses)
  clear_has_misses();
  ::cartographer::sensor::proto::CompressedPointCloud* temp = misses_;
  misses_ = NULL;
  return temp;
}
void CompressedRangeData::set_allocated_misses(::cartographer::sensor::proto::CompressedPointCloud* misses) {
  delete misses_;
  misses_ = misses;
  if (misses) {
    set_has_misses();
  } else {
    clear_has_misses();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.CompressedRangeData.misses)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OdometryData::kTimestampFieldNumber;
const int OdometryData::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OdometryData::OdometryData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.OdometryData)
}
OdometryData::OdometryData(const OdometryData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::cartographer::transform::proto::Rigid3d(*from.pose_);
  } else {
    pose_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.OdometryData)
}

void OdometryData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(timestamp_));
}

OdometryData::~OdometryData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.OdometryData)
  SharedDtor();
}

void OdometryData::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void OdometryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OdometryData::descriptor() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OdometryData& OdometryData::default_instance() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

OdometryData* OdometryData::New(::google::protobuf::Arena* arena) const {
  OdometryData* n = new OdometryData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OdometryData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.OdometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_pose()) {
    GOOGLE_DCHECK(pose_ != NULL);
    pose_->::cartographer::transform::proto::Rigid3d::Clear();
  }
  timestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OdometryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.OdometryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.transform.proto.Rigid3d pose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.OdometryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.OdometryData)
  return false;
#undef DO_
}

void OdometryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.OdometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .cartographer.transform.proto.Rigid3d pose = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pose_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.OdometryData)
}

::google::protobuf::uint8* OdometryData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.OdometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional .cartographer.transform.proto.Rigid3d pose = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pose_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.OdometryData)
  return target;
}

size_t OdometryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.OdometryData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .cartographer.transform.proto.Rigid3d pose = 2;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OdometryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.OdometryData)
  GOOGLE_DCHECK_NE(&from, this);
  const OdometryData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OdometryData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.OdometryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.OdometryData)
    MergeFrom(*source);
  }
}

void OdometryData::MergeFrom(const OdometryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.OdometryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OdometryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.OdometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OdometryData::CopyFrom(const OdometryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.OdometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdometryData::IsInitialized() const {
  return true;
}

void OdometryData::Swap(OdometryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OdometryData::InternalSwap(OdometryData* other) {
  using std::swap;
  swap(pose_, other->pose_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OdometryData::GetMetadata() const {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OdometryData

// optional int64 timestamp = 1;
bool OdometryData::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OdometryData::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void OdometryData::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void OdometryData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 OdometryData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.OdometryData.timestamp)
  return timestamp_;
}
void OdometryData::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.OdometryData.timestamp)
}

// optional .cartographer.transform.proto.Rigid3d pose = 2;
bool OdometryData::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OdometryData::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
void OdometryData::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
void OdometryData::clear_pose() {
  if (pose_ != NULL) pose_->::cartographer::transform::proto::Rigid3d::Clear();
  clear_has_pose();
}
const ::cartographer::transform::proto::Rigid3d& OdometryData::pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = pose_;
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.OdometryData.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
::cartographer::transform::proto::Rigid3d* OdometryData::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.OdometryData.pose)
  return pose_;
}
::cartographer::transform::proto::Rigid3d* OdometryData::release_pose() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.OdometryData.pose)
  clear_has_pose();
  ::cartographer::transform::proto::Rigid3d* temp = pose_;
  pose_ = NULL;
  return temp;
}
void OdometryData::set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.OdometryData.pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FixedFramePoseData::kTimestampFieldNumber;
const int FixedFramePoseData::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FixedFramePoseData::FixedFramePoseData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.FixedFramePoseData)
}
FixedFramePoseData::FixedFramePoseData(const FixedFramePoseData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::cartographer::transform::proto::Rigid3d(*from.pose_);
  } else {
    pose_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.FixedFramePoseData)
}

void FixedFramePoseData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(timestamp_));
}

FixedFramePoseData::~FixedFramePoseData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.FixedFramePoseData)
  SharedDtor();
}

void FixedFramePoseData::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void FixedFramePoseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixedFramePoseData::descriptor() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FixedFramePoseData& FixedFramePoseData::default_instance() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

FixedFramePoseData* FixedFramePoseData::New(::google::protobuf::Arena* arena) const {
  FixedFramePoseData* n = new FixedFramePoseData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FixedFramePoseData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.FixedFramePoseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_pose()) {
    GOOGLE_DCHECK(pose_ != NULL);
    pose_->::cartographer::transform::proto::Rigid3d::Clear();
  }
  timestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FixedFramePoseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.FixedFramePoseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.transform.proto.Rigid3d pose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.FixedFramePoseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.FixedFramePoseData)
  return false;
#undef DO_
}

void FixedFramePoseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.FixedFramePoseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .cartographer.transform.proto.Rigid3d pose = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pose_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.FixedFramePoseData)
}

::google::protobuf::uint8* FixedFramePoseData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.FixedFramePoseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional .cartographer.transform.proto.Rigid3d pose = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pose_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.FixedFramePoseData)
  return target;
}

size_t FixedFramePoseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.FixedFramePoseData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .cartographer.transform.proto.Rigid3d pose = 2;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixedFramePoseData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.FixedFramePoseData)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedFramePoseData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FixedFramePoseData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.FixedFramePoseData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.FixedFramePoseData)
    MergeFrom(*source);
  }
}

void FixedFramePoseData::MergeFrom(const FixedFramePoseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.FixedFramePoseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FixedFramePoseData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.FixedFramePoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedFramePoseData::CopyFrom(const FixedFramePoseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.FixedFramePoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedFramePoseData::IsInitialized() const {
  return true;
}

void FixedFramePoseData::Swap(FixedFramePoseData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FixedFramePoseData::InternalSwap(FixedFramePoseData* other) {
  using std::swap;
  swap(pose_, other->pose_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FixedFramePoseData::GetMetadata() const {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FixedFramePoseData

// optional int64 timestamp = 1;
bool FixedFramePoseData::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FixedFramePoseData::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void FixedFramePoseData::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void FixedFramePoseData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 FixedFramePoseData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.FixedFramePoseData.timestamp)
  return timestamp_;
}
void FixedFramePoseData::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.FixedFramePoseData.timestamp)
}

// optional .cartographer.transform.proto.Rigid3d pose = 2;
bool FixedFramePoseData::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FixedFramePoseData::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
void FixedFramePoseData::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
void FixedFramePoseData::clear_pose() {
  if (pose_ != NULL) pose_->::cartographer::transform::proto::Rigid3d::Clear();
  clear_has_pose();
}
const ::cartographer::transform::proto::Rigid3d& FixedFramePoseData::pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = pose_;
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.FixedFramePoseData.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
::cartographer::transform::proto::Rigid3d* FixedFramePoseData::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.FixedFramePoseData.pose)
  return pose_;
}
::cartographer::transform::proto::Rigid3d* FixedFramePoseData::release_pose() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.FixedFramePoseData.pose)
  clear_has_pose();
  ::cartographer::transform::proto::Rigid3d* temp = pose_;
  pose_ = NULL;
  return temp;
}
void FixedFramePoseData::set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.FixedFramePoseData.pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sensor
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
