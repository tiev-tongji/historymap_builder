// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/serialization.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/serialization.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {
class SubmapDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Submap>
     _instance;
} _Submap_default_instance_;
class NodeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Node>
     _instance;
} _Node_default_instance_;
class SerializedDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SerializedData>
     _instance;
} _SerializedData_default_instance_;

namespace protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap, submap_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap, submap_2d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Submap, submap_3d_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, node_data_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedData, submap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedData, node_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(Submap)},
  { 11, 18, sizeof(Node)},
  { 20, 27, sizeof(SerializedData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Submap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SerializedData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/mapping/proto/serialization.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::cartographer::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2fsparse_5fpose_5fgraph_2eproto::InitDefaults();
  ::cartographer::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2fsubmap_2eproto::InitDefaults();
  ::cartographer::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto::InitDefaults();
  _Submap_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Submap_default_instance_);_Node_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Node_default_instance_);_SerializedData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SerializedData_default_instance_);_Submap_default_instance_._instance.get_mutable()->submap_id_ = const_cast< ::cartographer::mapping::proto::SubmapId*>(
      ::cartographer::mapping::proto::SubmapId::internal_default_instance());
  _Submap_default_instance_._instance.get_mutable()->submap_2d_ = const_cast< ::cartographer::mapping::proto::Submap2D*>(
      ::cartographer::mapping::proto::Submap2D::internal_default_instance());
  _Submap_default_instance_._instance.get_mutable()->submap_3d_ = const_cast< ::cartographer::mapping::proto::Submap3D*>(
      ::cartographer::mapping::proto::Submap3D::internal_default_instance());
  _Node_default_instance_._instance.get_mutable()->node_id_ = const_cast< ::cartographer::mapping::proto::NodeId*>(
      ::cartographer::mapping::proto::NodeId::internal_default_instance());
  _Node_default_instance_._instance.get_mutable()->node_data_ = const_cast< ::cartographer::mapping::proto::TrajectoryNodeData*>(
      ::cartographer::mapping::proto::TrajectoryNodeData::internal_default_instance());
  _SerializedData_default_instance_._instance.get_mutable()->submap_ = const_cast< ::cartographer::mapping::proto::Submap*>(
      ::cartographer::mapping::proto::Submap::internal_default_instance());
  _SerializedData_default_instance_._instance.get_mutable()->node_ = const_cast< ::cartographer::mapping::proto::Node*>(
      ::cartographer::mapping::proto::Node::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n.cartographer/mapping/proto/serializati"
      "on.proto\022\032cartographer.mapping.proto\0322ca"
      "rtographer/mapping/proto/sparse_pose_gra"
      "ph.proto\032\'cartographer/mapping/proto/sub"
      "map.proto\0325cartographer/mapping/proto/tr"
      "ajectory_node_data.proto\"\263\001\n\006Submap\0227\n\ts"
      "ubmap_id\030\001 \001(\0132$.cartographer.mapping.pr"
      "oto.SubmapId\0227\n\tsubmap_2d\030\002 \001(\0132$.cartog"
      "rapher.mapping.proto.Submap2D\0227\n\tsubmap_"
      "3d\030\003 \001(\0132$.cartographer.mapping.proto.Su"
      "bmap3D\"~\n\004Node\0223\n\007node_id\030\001 \001(\0132\".cartog"
      "rapher.mapping.proto.NodeId\022A\n\tnode_data"
      "\030\005 \001(\0132..cartographer.mapping.proto.Traj"
      "ectoryNodeData\"t\n\016SerializedData\0222\n\006subm"
      "ap\030\001 \001(\0132\".cartographer.mapping.proto.Su"
      "bmap\022.\n\004node\030\002 \001(\0132 .cartographer.mappin"
      "g.proto.Node"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 652);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/serialization.proto", &protobuf_RegisterTypes);
  ::cartographer::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2fsparse_5fpose_5fgraph_2eproto::AddDescriptors();
  ::cartographer::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2fsubmap_2eproto::AddDescriptors();
  ::cartographer::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Submap::kSubmapIdFieldNumber;
const int Submap::kSubmap2DFieldNumber;
const int Submap::kSubmap3DFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Submap::Submap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Submap)
}
Submap::Submap(const Submap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_submap_id()) {
    submap_id_ = new ::cartographer::mapping::proto::SubmapId(*from.submap_id_);
  } else {
    submap_id_ = NULL;
  }
  if (from.has_submap_2d()) {
    submap_2d_ = new ::cartographer::mapping::proto::Submap2D(*from.submap_2d_);
  } else {
    submap_2d_ = NULL;
  }
  if (from.has_submap_3d()) {
    submap_3d_ = new ::cartographer::mapping::proto::Submap3D(*from.submap_3d_);
  } else {
    submap_3d_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Submap)
}

void Submap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&submap_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&submap_3d_) -
      reinterpret_cast<char*>(&submap_id_)) + sizeof(submap_3d_));
}

Submap::~Submap() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Submap)
  SharedDtor();
}

void Submap::SharedDtor() {
  if (this != internal_default_instance()) delete submap_id_;
  if (this != internal_default_instance()) delete submap_2d_;
  if (this != internal_default_instance()) delete submap_3d_;
}

void Submap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Submap::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Submap& Submap::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaults();
  return *internal_default_instance();
}

Submap* Submap::New(::google::protobuf::Arena* arena) const {
  Submap* n = new Submap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Submap::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Submap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(submap_id_ != NULL);
      submap_id_->::cartographer::mapping::proto::SubmapId::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(submap_2d_ != NULL);
      submap_2d_->::cartographer::mapping::proto::Submap2D::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(submap_3d_ != NULL);
      submap_3d_->::cartographer::mapping::proto::Submap3D::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Submap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.Submap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.mapping.proto.SubmapId submap_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submap_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.mapping.proto.Submap2D submap_2d = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submap_2d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.mapping.proto.Submap3D submap_3d = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submap_3d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.Submap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.Submap)
  return false;
#undef DO_
}

void Submap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.Submap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->submap_id_, output);
  }

  // optional .cartographer.mapping.proto.Submap2D submap_2d = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->submap_2d_, output);
  }

  // optional .cartographer.mapping.proto.Submap3D submap_3d = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->submap_3d_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.Submap)
}

::google::protobuf::uint8* Submap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Submap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->submap_id_, deterministic, target);
  }

  // optional .cartographer.mapping.proto.Submap2D submap_2d = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->submap_2d_, deterministic, target);
  }

  // optional .cartographer.mapping.proto.Submap3D submap_3d = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->submap_3d_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Submap)
  return target;
}

size_t Submap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Submap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .cartographer.mapping.proto.SubmapId submap_id = 1;
    if (has_submap_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->submap_id_);
    }

    // optional .cartographer.mapping.proto.Submap2D submap_2d = 2;
    if (has_submap_2d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->submap_2d_);
    }

    // optional .cartographer.mapping.proto.Submap3D submap_3d = 3;
    if (has_submap_3d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->submap_3d_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Submap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Submap)
  GOOGLE_DCHECK_NE(&from, this);
  const Submap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Submap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Submap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Submap)
    MergeFrom(*source);
  }
}

void Submap::MergeFrom(const Submap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Submap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_submap_id()->::cartographer::mapping::proto::SubmapId::MergeFrom(from.submap_id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_submap_2d()->::cartographer::mapping::proto::Submap2D::MergeFrom(from.submap_2d());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_submap_3d()->::cartographer::mapping::proto::Submap3D::MergeFrom(from.submap_3d());
    }
  }
}

void Submap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Submap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Submap::CopyFrom(const Submap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Submap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Submap::IsInitialized() const {
  return true;
}

void Submap::Swap(Submap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Submap::InternalSwap(Submap* other) {
  using std::swap;
  swap(submap_id_, other->submap_id_);
  swap(submap_2d_, other->submap_2d_);
  swap(submap_3d_, other->submap_3d_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Submap::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Submap

// optional .cartographer.mapping.proto.SubmapId submap_id = 1;
bool Submap::has_submap_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Submap::set_has_submap_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Submap::clear_has_submap_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Submap::clear_submap_id() {
  if (submap_id_ != NULL) submap_id_->::cartographer::mapping::proto::SubmapId::Clear();
  clear_has_submap_id();
}
const ::cartographer::mapping::proto::SubmapId& Submap::submap_id() const {
  const ::cartographer::mapping::proto::SubmapId* p = submap_id_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap.submap_id)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::SubmapId*>(
      &::cartographer::mapping::proto::_SubmapId_default_instance_);
}
::cartographer::mapping::proto::SubmapId* Submap::mutable_submap_id() {
  set_has_submap_id();
  if (submap_id_ == NULL) {
    submap_id_ = new ::cartographer::mapping::proto::SubmapId;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap.submap_id)
  return submap_id_;
}
::cartographer::mapping::proto::SubmapId* Submap::release_submap_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap.submap_id)
  clear_has_submap_id();
  ::cartographer::mapping::proto::SubmapId* temp = submap_id_;
  submap_id_ = NULL;
  return temp;
}
void Submap::set_allocated_submap_id(::cartographer::mapping::proto::SubmapId* submap_id) {
  delete submap_id_;
  submap_id_ = submap_id;
  if (submap_id) {
    set_has_submap_id();
  } else {
    clear_has_submap_id();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap.submap_id)
}

// optional .cartographer.mapping.proto.Submap2D submap_2d = 2;
bool Submap::has_submap_2d() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Submap::set_has_submap_2d() {
  _has_bits_[0] |= 0x00000002u;
}
void Submap::clear_has_submap_2d() {
  _has_bits_[0] &= ~0x00000002u;
}
void Submap::clear_submap_2d() {
  if (submap_2d_ != NULL) submap_2d_->::cartographer::mapping::proto::Submap2D::Clear();
  clear_has_submap_2d();
}
const ::cartographer::mapping::proto::Submap2D& Submap::submap_2d() const {
  const ::cartographer::mapping::proto::Submap2D* p = submap_2d_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap.submap_2d)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::Submap2D*>(
      &::cartographer::mapping::proto::_Submap2D_default_instance_);
}
::cartographer::mapping::proto::Submap2D* Submap::mutable_submap_2d() {
  set_has_submap_2d();
  if (submap_2d_ == NULL) {
    submap_2d_ = new ::cartographer::mapping::proto::Submap2D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap.submap_2d)
  return submap_2d_;
}
::cartographer::mapping::proto::Submap2D* Submap::release_submap_2d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap.submap_2d)
  clear_has_submap_2d();
  ::cartographer::mapping::proto::Submap2D* temp = submap_2d_;
  submap_2d_ = NULL;
  return temp;
}
void Submap::set_allocated_submap_2d(::cartographer::mapping::proto::Submap2D* submap_2d) {
  delete submap_2d_;
  submap_2d_ = submap_2d;
  if (submap_2d) {
    set_has_submap_2d();
  } else {
    clear_has_submap_2d();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap.submap_2d)
}

// optional .cartographer.mapping.proto.Submap3D submap_3d = 3;
bool Submap::has_submap_3d() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Submap::set_has_submap_3d() {
  _has_bits_[0] |= 0x00000004u;
}
void Submap::clear_has_submap_3d() {
  _has_bits_[0] &= ~0x00000004u;
}
void Submap::clear_submap_3d() {
  if (submap_3d_ != NULL) submap_3d_->::cartographer::mapping::proto::Submap3D::Clear();
  clear_has_submap_3d();
}
const ::cartographer::mapping::proto::Submap3D& Submap::submap_3d() const {
  const ::cartographer::mapping::proto::Submap3D* p = submap_3d_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap.submap_3d)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::Submap3D*>(
      &::cartographer::mapping::proto::_Submap3D_default_instance_);
}
::cartographer::mapping::proto::Submap3D* Submap::mutable_submap_3d() {
  set_has_submap_3d();
  if (submap_3d_ == NULL) {
    submap_3d_ = new ::cartographer::mapping::proto::Submap3D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap.submap_3d)
  return submap_3d_;
}
::cartographer::mapping::proto::Submap3D* Submap::release_submap_3d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap.submap_3d)
  clear_has_submap_3d();
  ::cartographer::mapping::proto::Submap3D* temp = submap_3d_;
  submap_3d_ = NULL;
  return temp;
}
void Submap::set_allocated_submap_3d(::cartographer::mapping::proto::Submap3D* submap_3d) {
  delete submap_3d_;
  submap_3d_ = submap_3d;
  if (submap_3d) {
    set_has_submap_3d();
  } else {
    clear_has_submap_3d();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap.submap_3d)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kNodeIdFieldNumber;
const int Node::kNodeDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Node)
}
Node::Node(const Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node_id()) {
    node_id_ = new ::cartographer::mapping::proto::NodeId(*from.node_id_);
  } else {
    node_id_ = NULL;
  }
  if (from.has_node_data()) {
    node_data_ = new ::cartographer::mapping::proto::TrajectoryNodeData(*from.node_data_);
  } else {
    node_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Node)
}

void Node::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_data_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(node_data_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  if (this != internal_default_instance()) delete node_id_;
  if (this != internal_default_instance()) delete node_data_;
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Node& Node::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaults();
  return *internal_default_instance();
}

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(node_id_ != NULL);
      node_id_->::cartographer::mapping::proto::NodeId::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(node_data_ != NULL);
      node_data_->::cartographer::mapping::proto::TrajectoryNodeData::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.mapping.proto.NodeId node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.mapping.proto.TrajectoryNodeData node_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cartographer.mapping.proto.NodeId node_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->node_id_, output);
  }

  // optional .cartographer.mapping.proto.TrajectoryNodeData node_data = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->node_data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cartographer.mapping.proto.NodeId node_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->node_id_, deterministic, target);
  }

  // optional .cartographer.mapping.proto.TrajectoryNodeData node_data = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->node_data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Node)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .cartographer.mapping.proto.NodeId node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->node_id_);
    }

    // optional .cartographer.mapping.proto.TrajectoryNodeData node_data = 5;
    if (has_node_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->node_data_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_node_id()->::cartographer::mapping::proto::NodeId::MergeFrom(from.node_id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_node_data()->::cartographer::mapping::proto::TrajectoryNodeData::MergeFrom(from.node_data());
    }
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  using std::swap;
  swap(node_id_, other->node_id_);
  swap(node_data_, other->node_data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node

// optional .cartographer.mapping.proto.NodeId node_id = 1;
bool Node::has_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Node::set_has_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Node::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Node::clear_node_id() {
  if (node_id_ != NULL) node_id_->::cartographer::mapping::proto::NodeId::Clear();
  clear_has_node_id();
}
const ::cartographer::mapping::proto::NodeId& Node::node_id() const {
  const ::cartographer::mapping::proto::NodeId* p = node_id_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Node.node_id)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::NodeId*>(
      &::cartographer::mapping::proto::_NodeId_default_instance_);
}
::cartographer::mapping::proto::NodeId* Node::mutable_node_id() {
  set_has_node_id();
  if (node_id_ == NULL) {
    node_id_ = new ::cartographer::mapping::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Node.node_id)
  return node_id_;
}
::cartographer::mapping::proto::NodeId* Node::release_node_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Node.node_id)
  clear_has_node_id();
  ::cartographer::mapping::proto::NodeId* temp = node_id_;
  node_id_ = NULL;
  return temp;
}
void Node::set_allocated_node_id(::cartographer::mapping::proto::NodeId* node_id) {
  delete node_id_;
  node_id_ = node_id;
  if (node_id) {
    set_has_node_id();
  } else {
    clear_has_node_id();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Node.node_id)
}

// optional .cartographer.mapping.proto.TrajectoryNodeData node_data = 5;
bool Node::has_node_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Node::set_has_node_data() {
  _has_bits_[0] |= 0x00000002u;
}
void Node::clear_has_node_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void Node::clear_node_data() {
  if (node_data_ != NULL) node_data_->::cartographer::mapping::proto::TrajectoryNodeData::Clear();
  clear_has_node_data();
}
const ::cartographer::mapping::proto::TrajectoryNodeData& Node::node_data() const {
  const ::cartographer::mapping::proto::TrajectoryNodeData* p = node_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Node.node_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::TrajectoryNodeData*>(
      &::cartographer::mapping::proto::_TrajectoryNodeData_default_instance_);
}
::cartographer::mapping::proto::TrajectoryNodeData* Node::mutable_node_data() {
  set_has_node_data();
  if (node_data_ == NULL) {
    node_data_ = new ::cartographer::mapping::proto::TrajectoryNodeData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Node.node_data)
  return node_data_;
}
::cartographer::mapping::proto::TrajectoryNodeData* Node::release_node_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Node.node_data)
  clear_has_node_data();
  ::cartographer::mapping::proto::TrajectoryNodeData* temp = node_data_;
  node_data_ = NULL;
  return temp;
}
void Node::set_allocated_node_data(::cartographer::mapping::proto::TrajectoryNodeData* node_data) {
  delete node_data_;
  node_data_ = node_data;
  if (node_data) {
    set_has_node_data();
  } else {
    clear_has_node_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Node.node_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerializedData::kSubmapFieldNumber;
const int SerializedData::kNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerializedData::SerializedData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SerializedData)
}
SerializedData::SerializedData(const SerializedData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_submap()) {
    submap_ = new ::cartographer::mapping::proto::Submap(*from.submap_);
  } else {
    submap_ = NULL;
  }
  if (from.has_node()) {
    node_ = new ::cartographer::mapping::proto::Node(*from.node_);
  } else {
    node_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SerializedData)
}

void SerializedData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&submap_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_) -
      reinterpret_cast<char*>(&submap_)) + sizeof(node_));
}

SerializedData::~SerializedData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SerializedData)
  SharedDtor();
}

void SerializedData::SharedDtor() {
  if (this != internal_default_instance()) delete submap_;
  if (this != internal_default_instance()) delete node_;
}

void SerializedData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedData::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SerializedData& SerializedData::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaults();
  return *internal_default_instance();
}

SerializedData* SerializedData::New(::google::protobuf::Arena* arena) const {
  SerializedData* n = new SerializedData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SerializedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(submap_ != NULL);
      submap_->::cartographer::mapping::proto::Submap::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(node_ != NULL);
      node_->::cartographer::mapping::proto::Node::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SerializedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SerializedData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.mapping.proto.Submap submap = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.mapping.proto.Node node = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SerializedData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SerializedData)
  return false;
#undef DO_
}

void SerializedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SerializedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cartographer.mapping.proto.Submap submap = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->submap_, output);
  }

  // optional .cartographer.mapping.proto.Node node = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->node_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SerializedData)
}

::google::protobuf::uint8* SerializedData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SerializedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cartographer.mapping.proto.Submap submap = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->submap_, deterministic, target);
  }

  // optional .cartographer.mapping.proto.Node node = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->node_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SerializedData)
  return target;
}

size_t SerializedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SerializedData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .cartographer.mapping.proto.Submap submap = 1;
    if (has_submap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->submap_);
    }

    // optional .cartographer.mapping.proto.Node node = 2;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->node_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SerializedData)
  GOOGLE_DCHECK_NE(&from, this);
  const SerializedData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SerializedData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SerializedData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SerializedData)
    MergeFrom(*source);
  }
}

void SerializedData::MergeFrom(const SerializedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SerializedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_submap()->::cartographer::mapping::proto::Submap::MergeFrom(from.submap());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_node()->::cartographer::mapping::proto::Node::MergeFrom(from.node());
    }
  }
}

void SerializedData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SerializedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedData::CopyFrom(const SerializedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SerializedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedData::IsInitialized() const {
  return true;
}

void SerializedData::Swap(SerializedData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedData::InternalSwap(SerializedData* other) {
  using std::swap;
  swap(submap_, other->submap_);
  swap(node_, other->node_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedData::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedData

// optional .cartographer.mapping.proto.Submap submap = 1;
bool SerializedData::has_submap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SerializedData::set_has_submap() {
  _has_bits_[0] |= 0x00000001u;
}
void SerializedData::clear_has_submap() {
  _has_bits_[0] &= ~0x00000001u;
}
void SerializedData::clear_submap() {
  if (submap_ != NULL) submap_->::cartographer::mapping::proto::Submap::Clear();
  clear_has_submap();
}
const ::cartographer::mapping::proto::Submap& SerializedData::submap() const {
  const ::cartographer::mapping::proto::Submap* p = submap_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.submap)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::Submap*>(
      &::cartographer::mapping::proto::_Submap_default_instance_);
}
::cartographer::mapping::proto::Submap* SerializedData::mutable_submap() {
  set_has_submap();
  if (submap_ == NULL) {
    submap_ = new ::cartographer::mapping::proto::Submap;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.submap)
  return submap_;
}
::cartographer::mapping::proto::Submap* SerializedData::release_submap() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.submap)
  clear_has_submap();
  ::cartographer::mapping::proto::Submap* temp = submap_;
  submap_ = NULL;
  return temp;
}
void SerializedData::set_allocated_submap(::cartographer::mapping::proto::Submap* submap) {
  delete submap_;
  submap_ = submap;
  if (submap) {
    set_has_submap();
  } else {
    clear_has_submap();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.submap)
}

// optional .cartographer.mapping.proto.Node node = 2;
bool SerializedData::has_node() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SerializedData::set_has_node() {
  _has_bits_[0] |= 0x00000002u;
}
void SerializedData::clear_has_node() {
  _has_bits_[0] &= ~0x00000002u;
}
void SerializedData::clear_node() {
  if (node_ != NULL) node_->::cartographer::mapping::proto::Node::Clear();
  clear_has_node();
}
const ::cartographer::mapping::proto::Node& SerializedData::node() const {
  const ::cartographer::mapping::proto::Node* p = node_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.node)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::Node*>(
      &::cartographer::mapping::proto::_Node_default_instance_);
}
::cartographer::mapping::proto::Node* SerializedData::mutable_node() {
  set_has_node();
  if (node_ == NULL) {
    node_ = new ::cartographer::mapping::proto::Node;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.node)
  return node_;
}
::cartographer::mapping::proto::Node* SerializedData::release_node() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.node)
  clear_has_node();
  ::cartographer::mapping::proto::Node* temp = node_;
  node_ = NULL;
  return temp;
}
void SerializedData::set_allocated_node(::cartographer::mapping::proto::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    set_has_node();
  } else {
    clear_has_node();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.node)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
