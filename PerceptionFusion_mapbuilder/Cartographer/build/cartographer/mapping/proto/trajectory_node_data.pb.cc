// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/trajectory_node_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/trajectory_node_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {
class TrajectoryNodeDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryNodeData>
     _instance;
} _TrajectoryNodeData_default_instance_;

namespace protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, gravity_alignment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, filtered_gravity_aligned_point_cloud_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, high_resolution_point_cloud_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, low_resolution_point_cloud_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, rotational_scan_matcher_histogram_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, initial_pose_),
  5,
  0,
  1,
  2,
  3,
  ~0u,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(TrajectoryNodeData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrajectoryNodeData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/mapping/proto/trajectory_node_data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::cartographer::sensor::proto::protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  ::cartographer::transform::proto::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaults();
  _TrajectoryNodeData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TrajectoryNodeData_default_instance_);_TrajectoryNodeData_default_instance_._instance.get_mutable()->gravity_alignment_ = const_cast< ::cartographer::transform::proto::Quaterniond*>(
      ::cartographer::transform::proto::Quaterniond::internal_default_instance());
  _TrajectoryNodeData_default_instance_._instance.get_mutable()->filtered_gravity_aligned_point_cloud_ = const_cast< ::cartographer::sensor::proto::CompressedPointCloud*>(
      ::cartographer::sensor::proto::CompressedPointCloud::internal_default_instance());
  _TrajectoryNodeData_default_instance_._instance.get_mutable()->high_resolution_point_cloud_ = const_cast< ::cartographer::sensor::proto::CompressedPointCloud*>(
      ::cartographer::sensor::proto::CompressedPointCloud::internal_default_instance());
  _TrajectoryNodeData_default_instance_._instance.get_mutable()->low_resolution_point_cloud_ = const_cast< ::cartographer::sensor::proto::CompressedPointCloud*>(
      ::cartographer::sensor::proto::CompressedPointCloud::internal_default_instance());
  _TrajectoryNodeData_default_instance_._instance.get_mutable()->initial_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n5cartographer/mapping/proto/trajectory_"
      "node_data.proto\022\032cartographer.mapping.pr"
      "oto\032&cartographer/sensor/proto/sensor.pr"
      "oto\032,cartographer/transform/proto/transf"
      "orm.proto\"\337\003\n\022TrajectoryNodeData\022\021\n\ttime"
      "stamp\030\001 \001(\003\022D\n\021gravity_alignment\030\002 \001(\0132)"
      ".cartographer.transform.proto.Quaternion"
      "d\022]\n$filtered_gravity_aligned_point_clou"
      "d\030\003 \001(\0132/.cartographer.sensor.proto.Comp"
      "ressedPointCloud\022T\n\033high_resolution_poin"
      "t_cloud\030\004 \001(\0132/.cartographer.sensor.prot"
      "o.CompressedPointCloud\022S\n\032low_resolution"
      "_point_cloud\030\005 \001(\0132/.cartographer.sensor"
      ".proto.CompressedPointCloud\022)\n!rotationa"
      "l_scan_matcher_histogram\030\006 \003(\002\022;\n\014initia"
      "l_pose\030\007 \001(\0132%.cartographer.transform.pr"
      "oto.Rigid3d"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 651);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/trajectory_node_data.proto", &protobuf_RegisterTypes);
  ::cartographer::sensor::proto::protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::AddDescriptors();
  ::cartographer::transform::proto::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryNodeData::kTimestampFieldNumber;
const int TrajectoryNodeData::kGravityAlignmentFieldNumber;
const int TrajectoryNodeData::kFilteredGravityAlignedPointCloudFieldNumber;
const int TrajectoryNodeData::kHighResolutionPointCloudFieldNumber;
const int TrajectoryNodeData::kLowResolutionPointCloudFieldNumber;
const int TrajectoryNodeData::kRotationalScanMatcherHistogramFieldNumber;
const int TrajectoryNodeData::kInitialPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryNodeData::TrajectoryNodeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.TrajectoryNodeData)
}
TrajectoryNodeData::TrajectoryNodeData(const TrajectoryNodeData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      rotational_scan_matcher_histogram_(from.rotational_scan_matcher_histogram_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gravity_alignment()) {
    gravity_alignment_ = new ::cartographer::transform::proto::Quaterniond(*from.gravity_alignment_);
  } else {
    gravity_alignment_ = NULL;
  }
  if (from.has_filtered_gravity_aligned_point_cloud()) {
    filtered_gravity_aligned_point_cloud_ = new ::cartographer::sensor::proto::CompressedPointCloud(*from.filtered_gravity_aligned_point_cloud_);
  } else {
    filtered_gravity_aligned_point_cloud_ = NULL;
  }
  if (from.has_high_resolution_point_cloud()) {
    high_resolution_point_cloud_ = new ::cartographer::sensor::proto::CompressedPointCloud(*from.high_resolution_point_cloud_);
  } else {
    high_resolution_point_cloud_ = NULL;
  }
  if (from.has_low_resolution_point_cloud()) {
    low_resolution_point_cloud_ = new ::cartographer::sensor::proto::CompressedPointCloud(*from.low_resolution_point_cloud_);
  } else {
    low_resolution_point_cloud_ = NULL;
  }
  if (from.has_initial_pose()) {
    initial_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.initial_pose_);
  } else {
    initial_pose_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TrajectoryNodeData)
}

void TrajectoryNodeData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&gravity_alignment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&gravity_alignment_)) + sizeof(timestamp_));
}

TrajectoryNodeData::~TrajectoryNodeData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TrajectoryNodeData)
  SharedDtor();
}

void TrajectoryNodeData::SharedDtor() {
  if (this != internal_default_instance()) delete gravity_alignment_;
  if (this != internal_default_instance()) delete filtered_gravity_aligned_point_cloud_;
  if (this != internal_default_instance()) delete high_resolution_point_cloud_;
  if (this != internal_default_instance()) delete low_resolution_point_cloud_;
  if (this != internal_default_instance()) delete initial_pose_;
}

void TrajectoryNodeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryNodeData::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryNodeData& TrajectoryNodeData::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrajectoryNodeData* TrajectoryNodeData::New(::google::protobuf::Arena* arena) const {
  TrajectoryNodeData* n = new TrajectoryNodeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryNodeData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TrajectoryNodeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rotational_scan_matcher_histogram_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(gravity_alignment_ != NULL);
      gravity_alignment_->::cartographer::transform::proto::Quaterniond::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(filtered_gravity_aligned_point_cloud_ != NULL);
      filtered_gravity_aligned_point_cloud_->::cartographer::sensor::proto::CompressedPointCloud::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(high_resolution_point_cloud_ != NULL);
      high_resolution_point_cloud_->::cartographer::sensor::proto::CompressedPointCloud::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(low_resolution_point_cloud_ != NULL);
      low_resolution_point_cloud_->::cartographer::sensor::proto::CompressedPointCloud::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(initial_pose_ != NULL);
      initial_pose_->::cartographer::transform::proto::Rigid3d::Clear();
    }
  }
  timestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrajectoryNodeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.TrajectoryNodeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.transform.proto.Quaterniond gravity_alignment = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gravity_alignment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.sensor.proto.CompressedPointCloud filtered_gravity_aligned_point_cloud = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filtered_gravity_aligned_point_cloud()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.sensor.proto.CompressedPointCloud high_resolution_point_cloud = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_high_resolution_point_cloud()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.sensor.proto.CompressedPointCloud low_resolution_point_cloud = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_low_resolution_point_cloud()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float rotational_scan_matcher_histogram = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53u, input, this->mutable_rotational_scan_matcher_histogram())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_rotational_scan_matcher_histogram())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.transform.proto.Rigid3d initial_pose = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initial_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.TrajectoryNodeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.TrajectoryNodeData)
  return false;
#undef DO_
}

void TrajectoryNodeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.TrajectoryNodeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .cartographer.transform.proto.Quaterniond gravity_alignment = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->gravity_alignment_, output);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud filtered_gravity_aligned_point_cloud = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->filtered_gravity_aligned_point_cloud_, output);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud high_resolution_point_cloud = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->high_resolution_point_cloud_, output);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud low_resolution_point_cloud = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->low_resolution_point_cloud_, output);
  }

  // repeated float rotational_scan_matcher_histogram = 6;
  for (int i = 0, n = this->rotational_scan_matcher_histogram_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->rotational_scan_matcher_histogram(i), output);
  }

  // optional .cartographer.transform.proto.Rigid3d initial_pose = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->initial_pose_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.TrajectoryNodeData)
}

::google::protobuf::uint8* TrajectoryNodeData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TrajectoryNodeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional .cartographer.transform.proto.Quaterniond gravity_alignment = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->gravity_alignment_, deterministic, target);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud filtered_gravity_aligned_point_cloud = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->filtered_gravity_aligned_point_cloud_, deterministic, target);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud high_resolution_point_cloud = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->high_resolution_point_cloud_, deterministic, target);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud low_resolution_point_cloud = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->low_resolution_point_cloud_, deterministic, target);
  }

  // repeated float rotational_scan_matcher_histogram = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(6, this->rotational_scan_matcher_histogram_, target);

  // optional .cartographer.transform.proto.Rigid3d initial_pose = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->initial_pose_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TrajectoryNodeData)
  return target;
}

size_t TrajectoryNodeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TrajectoryNodeData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float rotational_scan_matcher_histogram = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->rotational_scan_matcher_histogram_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->rotational_scan_matcher_histogram_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional .cartographer.transform.proto.Quaterniond gravity_alignment = 2;
    if (has_gravity_alignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gravity_alignment_);
    }

    // optional .cartographer.sensor.proto.CompressedPointCloud filtered_gravity_aligned_point_cloud = 3;
    if (has_filtered_gravity_aligned_point_cloud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->filtered_gravity_aligned_point_cloud_);
    }

    // optional .cartographer.sensor.proto.CompressedPointCloud high_resolution_point_cloud = 4;
    if (has_high_resolution_point_cloud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->high_resolution_point_cloud_);
    }

    // optional .cartographer.sensor.proto.CompressedPointCloud low_resolution_point_cloud = 5;
    if (has_low_resolution_point_cloud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->low_resolution_point_cloud_);
    }

    // optional .cartographer.transform.proto.Rigid3d initial_pose = 7;
    if (has_initial_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->initial_pose_);
    }

    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryNodeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.TrajectoryNodeData)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryNodeData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryNodeData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.TrajectoryNodeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.TrajectoryNodeData)
    MergeFrom(*source);
  }
}

void TrajectoryNodeData::MergeFrom(const TrajectoryNodeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TrajectoryNodeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rotational_scan_matcher_histogram_.MergeFrom(from.rotational_scan_matcher_histogram_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_gravity_alignment()->::cartographer::transform::proto::Quaterniond::MergeFrom(from.gravity_alignment());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_filtered_gravity_aligned_point_cloud()->::cartographer::sensor::proto::CompressedPointCloud::MergeFrom(from.filtered_gravity_aligned_point_cloud());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_high_resolution_point_cloud()->::cartographer::sensor::proto::CompressedPointCloud::MergeFrom(from.high_resolution_point_cloud());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_low_resolution_point_cloud()->::cartographer::sensor::proto::CompressedPointCloud::MergeFrom(from.low_resolution_point_cloud());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_initial_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.initial_pose());
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrajectoryNodeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.TrajectoryNodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryNodeData::CopyFrom(const TrajectoryNodeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TrajectoryNodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryNodeData::IsInitialized() const {
  return true;
}

void TrajectoryNodeData::Swap(TrajectoryNodeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryNodeData::InternalSwap(TrajectoryNodeData* other) {
  using std::swap;
  rotational_scan_matcher_histogram_.InternalSwap(&other->rotational_scan_matcher_histogram_);
  swap(gravity_alignment_, other->gravity_alignment_);
  swap(filtered_gravity_aligned_point_cloud_, other->filtered_gravity_aligned_point_cloud_);
  swap(high_resolution_point_cloud_, other->high_resolution_point_cloud_);
  swap(low_resolution_point_cloud_, other->low_resolution_point_cloud_);
  swap(initial_pose_, other->initial_pose_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryNodeData::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrajectoryNodeData

// optional int64 timestamp = 1;
bool TrajectoryNodeData::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TrajectoryNodeData::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
void TrajectoryNodeData::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
void TrajectoryNodeData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 TrajectoryNodeData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryNodeData.timestamp)
  return timestamp_;
}
void TrajectoryNodeData::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryNodeData.timestamp)
}

// optional .cartographer.transform.proto.Quaterniond gravity_alignment = 2;
bool TrajectoryNodeData::has_gravity_alignment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrajectoryNodeData::set_has_gravity_alignment() {
  _has_bits_[0] |= 0x00000001u;
}
void TrajectoryNodeData::clear_has_gravity_alignment() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrajectoryNodeData::clear_gravity_alignment() {
  if (gravity_alignment_ != NULL) gravity_alignment_->::cartographer::transform::proto::Quaterniond::Clear();
  clear_has_gravity_alignment();
}
const ::cartographer::transform::proto::Quaterniond& TrajectoryNodeData::gravity_alignment() const {
  const ::cartographer::transform::proto::Quaterniond* p = gravity_alignment_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryNodeData.gravity_alignment)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Quaterniond*>(
      &::cartographer::transform::proto::_Quaterniond_default_instance_);
}
::cartographer::transform::proto::Quaterniond* TrajectoryNodeData::mutable_gravity_alignment() {
  set_has_gravity_alignment();
  if (gravity_alignment_ == NULL) {
    gravity_alignment_ = new ::cartographer::transform::proto::Quaterniond;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryNodeData.gravity_alignment)
  return gravity_alignment_;
}
::cartographer::transform::proto::Quaterniond* TrajectoryNodeData::release_gravity_alignment() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryNodeData.gravity_alignment)
  clear_has_gravity_alignment();
  ::cartographer::transform::proto::Quaterniond* temp = gravity_alignment_;
  gravity_alignment_ = NULL;
  return temp;
}
void TrajectoryNodeData::set_allocated_gravity_alignment(::cartographer::transform::proto::Quaterniond* gravity_alignment) {
  delete gravity_alignment_;
  gravity_alignment_ = gravity_alignment;
  if (gravity_alignment) {
    set_has_gravity_alignment();
  } else {
    clear_has_gravity_alignment();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryNodeData.gravity_alignment)
}

// optional .cartographer.sensor.proto.CompressedPointCloud filtered_gravity_aligned_point_cloud = 3;
bool TrajectoryNodeData::has_filtered_gravity_aligned_point_cloud() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrajectoryNodeData::set_has_filtered_gravity_aligned_point_cloud() {
  _has_bits_[0] |= 0x00000002u;
}
void TrajectoryNodeData::clear_has_filtered_gravity_aligned_point_cloud() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrajectoryNodeData::clear_filtered_gravity_aligned_point_cloud() {
  if (filtered_gravity_aligned_point_cloud_ != NULL) filtered_gravity_aligned_point_cloud_->::cartographer::sensor::proto::CompressedPointCloud::Clear();
  clear_has_filtered_gravity_aligned_point_cloud();
}
const ::cartographer::sensor::proto::CompressedPointCloud& TrajectoryNodeData::filtered_gravity_aligned_point_cloud() const {
  const ::cartographer::sensor::proto::CompressedPointCloud* p = filtered_gravity_aligned_point_cloud_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryNodeData.filtered_gravity_aligned_point_cloud)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::sensor::proto::CompressedPointCloud*>(
      &::cartographer::sensor::proto::_CompressedPointCloud_default_instance_);
}
::cartographer::sensor::proto::CompressedPointCloud* TrajectoryNodeData::mutable_filtered_gravity_aligned_point_cloud() {
  set_has_filtered_gravity_aligned_point_cloud();
  if (filtered_gravity_aligned_point_cloud_ == NULL) {
    filtered_gravity_aligned_point_cloud_ = new ::cartographer::sensor::proto::CompressedPointCloud;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryNodeData.filtered_gravity_aligned_point_cloud)
  return filtered_gravity_aligned_point_cloud_;
}
::cartographer::sensor::proto::CompressedPointCloud* TrajectoryNodeData::release_filtered_gravity_aligned_point_cloud() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryNodeData.filtered_gravity_aligned_point_cloud)
  clear_has_filtered_gravity_aligned_point_cloud();
  ::cartographer::sensor::proto::CompressedPointCloud* temp = filtered_gravity_aligned_point_cloud_;
  filtered_gravity_aligned_point_cloud_ = NULL;
  return temp;
}
void TrajectoryNodeData::set_allocated_filtered_gravity_aligned_point_cloud(::cartographer::sensor::proto::CompressedPointCloud* filtered_gravity_aligned_point_cloud) {
  delete filtered_gravity_aligned_point_cloud_;
  filtered_gravity_aligned_point_cloud_ = filtered_gravity_aligned_point_cloud;
  if (filtered_gravity_aligned_point_cloud) {
    set_has_filtered_gravity_aligned_point_cloud();
  } else {
    clear_has_filtered_gravity_aligned_point_cloud();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryNodeData.filtered_gravity_aligned_point_cloud)
}

// optional .cartographer.sensor.proto.CompressedPointCloud high_resolution_point_cloud = 4;
bool TrajectoryNodeData::has_high_resolution_point_cloud() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrajectoryNodeData::set_has_high_resolution_point_cloud() {
  _has_bits_[0] |= 0x00000004u;
}
void TrajectoryNodeData::clear_has_high_resolution_point_cloud() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrajectoryNodeData::clear_high_resolution_point_cloud() {
  if (high_resolution_point_cloud_ != NULL) high_resolution_point_cloud_->::cartographer::sensor::proto::CompressedPointCloud::Clear();
  clear_has_high_resolution_point_cloud();
}
const ::cartographer::sensor::proto::CompressedPointCloud& TrajectoryNodeData::high_resolution_point_cloud() const {
  const ::cartographer::sensor::proto::CompressedPointCloud* p = high_resolution_point_cloud_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryNodeData.high_resolution_point_cloud)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::sensor::proto::CompressedPointCloud*>(
      &::cartographer::sensor::proto::_CompressedPointCloud_default_instance_);
}
::cartographer::sensor::proto::CompressedPointCloud* TrajectoryNodeData::mutable_high_resolution_point_cloud() {
  set_has_high_resolution_point_cloud();
  if (high_resolution_point_cloud_ == NULL) {
    high_resolution_point_cloud_ = new ::cartographer::sensor::proto::CompressedPointCloud;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryNodeData.high_resolution_point_cloud)
  return high_resolution_point_cloud_;
}
::cartographer::sensor::proto::CompressedPointCloud* TrajectoryNodeData::release_high_resolution_point_cloud() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryNodeData.high_resolution_point_cloud)
  clear_has_high_resolution_point_cloud();
  ::cartographer::sensor::proto::CompressedPointCloud* temp = high_resolution_point_cloud_;
  high_resolution_point_cloud_ = NULL;
  return temp;
}
void TrajectoryNodeData::set_allocated_high_resolution_point_cloud(::cartographer::sensor::proto::CompressedPointCloud* high_resolution_point_cloud) {
  delete high_resolution_point_cloud_;
  high_resolution_point_cloud_ = high_resolution_point_cloud;
  if (high_resolution_point_cloud) {
    set_has_high_resolution_point_cloud();
  } else {
    clear_has_high_resolution_point_cloud();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryNodeData.high_resolution_point_cloud)
}

// optional .cartographer.sensor.proto.CompressedPointCloud low_resolution_point_cloud = 5;
bool TrajectoryNodeData::has_low_resolution_point_cloud() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrajectoryNodeData::set_has_low_resolution_point_cloud() {
  _has_bits_[0] |= 0x00000008u;
}
void TrajectoryNodeData::clear_has_low_resolution_point_cloud() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrajectoryNodeData::clear_low_resolution_point_cloud() {
  if (low_resolution_point_cloud_ != NULL) low_resolution_point_cloud_->::cartographer::sensor::proto::CompressedPointCloud::Clear();
  clear_has_low_resolution_point_cloud();
}
const ::cartographer::sensor::proto::CompressedPointCloud& TrajectoryNodeData::low_resolution_point_cloud() const {
  const ::cartographer::sensor::proto::CompressedPointCloud* p = low_resolution_point_cloud_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryNodeData.low_resolution_point_cloud)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::sensor::proto::CompressedPointCloud*>(
      &::cartographer::sensor::proto::_CompressedPointCloud_default_instance_);
}
::cartographer::sensor::proto::CompressedPointCloud* TrajectoryNodeData::mutable_low_resolution_point_cloud() {
  set_has_low_resolution_point_cloud();
  if (low_resolution_point_cloud_ == NULL) {
    low_resolution_point_cloud_ = new ::cartographer::sensor::proto::CompressedPointCloud;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryNodeData.low_resolution_point_cloud)
  return low_resolution_point_cloud_;
}
::cartographer::sensor::proto::CompressedPointCloud* TrajectoryNodeData::release_low_resolution_point_cloud() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryNodeData.low_resolution_point_cloud)
  clear_has_low_resolution_point_cloud();
  ::cartographer::sensor::proto::CompressedPointCloud* temp = low_resolution_point_cloud_;
  low_resolution_point_cloud_ = NULL;
  return temp;
}
void TrajectoryNodeData::set_allocated_low_resolution_point_cloud(::cartographer::sensor::proto::CompressedPointCloud* low_resolution_point_cloud) {
  delete low_resolution_point_cloud_;
  low_resolution_point_cloud_ = low_resolution_point_cloud;
  if (low_resolution_point_cloud) {
    set_has_low_resolution_point_cloud();
  } else {
    clear_has_low_resolution_point_cloud();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryNodeData.low_resolution_point_cloud)
}

// repeated float rotational_scan_matcher_histogram = 6;
int TrajectoryNodeData::rotational_scan_matcher_histogram_size() const {
  return rotational_scan_matcher_histogram_.size();
}
void TrajectoryNodeData::clear_rotational_scan_matcher_histogram() {
  rotational_scan_matcher_histogram_.Clear();
}
float TrajectoryNodeData::rotational_scan_matcher_histogram(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryNodeData.rotational_scan_matcher_histogram)
  return rotational_scan_matcher_histogram_.Get(index);
}
void TrajectoryNodeData::set_rotational_scan_matcher_histogram(int index, float value) {
  rotational_scan_matcher_histogram_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryNodeData.rotational_scan_matcher_histogram)
}
void TrajectoryNodeData::add_rotational_scan_matcher_histogram(float value) {
  rotational_scan_matcher_histogram_.Add(value);
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.TrajectoryNodeData.rotational_scan_matcher_histogram)
}
const ::google::protobuf::RepeatedField< float >&
TrajectoryNodeData::rotational_scan_matcher_histogram() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.TrajectoryNodeData.rotational_scan_matcher_histogram)
  return rotational_scan_matcher_histogram_;
}
::google::protobuf::RepeatedField< float >*
TrajectoryNodeData::mutable_rotational_scan_matcher_histogram() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.TrajectoryNodeData.rotational_scan_matcher_histogram)
  return &rotational_scan_matcher_histogram_;
}

// optional .cartographer.transform.proto.Rigid3d initial_pose = 7;
bool TrajectoryNodeData::has_initial_pose() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TrajectoryNodeData::set_has_initial_pose() {
  _has_bits_[0] |= 0x00000010u;
}
void TrajectoryNodeData::clear_has_initial_pose() {
  _has_bits_[0] &= ~0x00000010u;
}
void TrajectoryNodeData::clear_initial_pose() {
  if (initial_pose_ != NULL) initial_pose_->::cartographer::transform::proto::Rigid3d::Clear();
  clear_has_initial_pose();
}
const ::cartographer::transform::proto::Rigid3d& TrajectoryNodeData::initial_pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = initial_pose_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryNodeData.initial_pose)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
::cartographer::transform::proto::Rigid3d* TrajectoryNodeData::mutable_initial_pose() {
  set_has_initial_pose();
  if (initial_pose_ == NULL) {
    initial_pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryNodeData.initial_pose)
  return initial_pose_;
}
::cartographer::transform::proto::Rigid3d* TrajectoryNodeData::release_initial_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryNodeData.initial_pose)
  clear_has_initial_pose();
  ::cartographer::transform::proto::Rigid3d* temp = initial_pose_;
  initial_pose_ = NULL;
  return temp;
}
void TrajectoryNodeData::set_allocated_initial_pose(::cartographer::transform::proto::Rigid3d* initial_pose) {
  delete initial_pose_;
  initial_pose_ = initial_pose;
  if (initial_pose) {
    set_has_initial_pose();
  } else {
    clear_has_initial_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryNodeData.initial_pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
