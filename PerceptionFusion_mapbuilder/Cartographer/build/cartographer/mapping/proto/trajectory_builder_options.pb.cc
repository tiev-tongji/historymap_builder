// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/trajectory_builder_options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/trajectory_builder_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {
class TrajectoryBuilderOptionsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryBuilderOptions>
     _instance;
} _TrajectoryBuilderOptions_default_instance_;

namespace protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, trajectory_builder_2d_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, trajectory_builder_3d_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, pure_localization_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(TrajectoryBuilderOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrajectoryBuilderOptions_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/mapping/proto/trajectory_builder_options.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::cartographer::mapping_2d::proto::protobuf_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  ::cartographer::mapping_3d::proto::protobuf_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  _TrajectoryBuilderOptions_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TrajectoryBuilderOptions_default_instance_);_TrajectoryBuilderOptions_default_instance_._instance.get_mutable()->trajectory_builder_2d_options_ = const_cast< ::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions*>(
      ::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions::internal_default_instance());
  _TrajectoryBuilderOptions_default_instance_._instance.get_mutable()->trajectory_builder_3d_options_ = const_cast< ::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions*>(
      ::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n;cartographer/mapping/proto/trajectory_"
      "builder_options.proto\022\032cartographer.mapp"
      "ing.proto\032Dcartographer/mapping_2d/proto"
      "/local_trajectory_builder_options.proto\032"
      "Dcartographer/mapping_3d/proto/local_tra"
      "jectory_builder_options.proto\"\377\001\n\030Trajec"
      "toryBuilderOptions\022c\n\035trajectory_builder"
      "_2d_options\030\001 \001(\0132<.cartographer.mapping"
      "_2d.proto.LocalTrajectoryBuilderOptions\022"
      "c\n\035trajectory_builder_3d_options\030\002 \001(\0132<"
      ".cartographer.mapping_3d.proto.LocalTraj"
      "ectoryBuilderOptions\022\031\n\021pure_localizatio"
      "n\030\003 \001(\010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 487);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/trajectory_builder_options.proto", &protobuf_RegisterTypes);
  ::cartographer::mapping_2d::proto::protobuf_cartographer_2fmapping_5f2d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto::AddDescriptors();
  ::cartographer::mapping_3d::proto::protobuf_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryBuilderOptions::kTrajectoryBuilder2DOptionsFieldNumber;
const int TrajectoryBuilderOptions::kTrajectoryBuilder3DOptionsFieldNumber;
const int TrajectoryBuilderOptions::kPureLocalizationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryBuilderOptions::TrajectoryBuilderOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.TrajectoryBuilderOptions)
}
TrajectoryBuilderOptions::TrajectoryBuilderOptions(const TrajectoryBuilderOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trajectory_builder_2d_options()) {
    trajectory_builder_2d_options_ = new ::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions(*from.trajectory_builder_2d_options_);
  } else {
    trajectory_builder_2d_options_ = NULL;
  }
  if (from.has_trajectory_builder_3d_options()) {
    trajectory_builder_3d_options_ = new ::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions(*from.trajectory_builder_3d_options_);
  } else {
    trajectory_builder_3d_options_ = NULL;
  }
  pure_localization_ = from.pure_localization_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TrajectoryBuilderOptions)
}

void TrajectoryBuilderOptions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&trajectory_builder_2d_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pure_localization_) -
      reinterpret_cast<char*>(&trajectory_builder_2d_options_)) + sizeof(pure_localization_));
}

TrajectoryBuilderOptions::~TrajectoryBuilderOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TrajectoryBuilderOptions)
  SharedDtor();
}

void TrajectoryBuilderOptions::SharedDtor() {
  if (this != internal_default_instance()) delete trajectory_builder_2d_options_;
  if (this != internal_default_instance()) delete trajectory_builder_3d_options_;
}

void TrajectoryBuilderOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryBuilderOptions::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryBuilderOptions& TrajectoryBuilderOptions::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrajectoryBuilderOptions* TrajectoryBuilderOptions::New(::google::protobuf::Arena* arena) const {
  TrajectoryBuilderOptions* n = new TrajectoryBuilderOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryBuilderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(trajectory_builder_2d_options_ != NULL);
      trajectory_builder_2d_options_->::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(trajectory_builder_3d_options_ != NULL);
      trajectory_builder_3d_options_->::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions::Clear();
    }
  }
  pure_localization_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrajectoryBuilderOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions trajectory_builder_2d_options = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory_builder_2d_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions trajectory_builder_3d_options = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory_builder_3d_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pure_localization = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_pure_localization();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pure_localization_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.TrajectoryBuilderOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.TrajectoryBuilderOptions)
  return false;
#undef DO_
}

void TrajectoryBuilderOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions trajectory_builder_2d_options = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->trajectory_builder_2d_options_, output);
  }

  // optional .cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions trajectory_builder_3d_options = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->trajectory_builder_3d_options_, output);
  }

  // optional bool pure_localization = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->pure_localization(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.TrajectoryBuilderOptions)
}

::google::protobuf::uint8* TrajectoryBuilderOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions trajectory_builder_2d_options = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->trajectory_builder_2d_options_, deterministic, target);
  }

  // optional .cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions trajectory_builder_3d_options = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->trajectory_builder_3d_options_, deterministic, target);
  }

  // optional bool pure_localization = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->pure_localization(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TrajectoryBuilderOptions)
  return target;
}

size_t TrajectoryBuilderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions trajectory_builder_2d_options = 1;
    if (has_trajectory_builder_2d_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trajectory_builder_2d_options_);
    }

    // optional .cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions trajectory_builder_3d_options = 2;
    if (has_trajectory_builder_3d_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trajectory_builder_3d_options_);
    }

    // optional bool pure_localization = 3;
    if (has_pure_localization()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryBuilderOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryBuilderOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryBuilderOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.TrajectoryBuilderOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.TrajectoryBuilderOptions)
    MergeFrom(*source);
  }
}

void TrajectoryBuilderOptions::MergeFrom(const TrajectoryBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_trajectory_builder_2d_options()->::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions::MergeFrom(from.trajectory_builder_2d_options());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_trajectory_builder_3d_options()->::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions::MergeFrom(from.trajectory_builder_3d_options());
    }
    if (cached_has_bits & 0x00000004u) {
      pure_localization_ = from.pure_localization_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrajectoryBuilderOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryBuilderOptions::CopyFrom(const TrajectoryBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryBuilderOptions::IsInitialized() const {
  return true;
}

void TrajectoryBuilderOptions::Swap(TrajectoryBuilderOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryBuilderOptions::InternalSwap(TrajectoryBuilderOptions* other) {
  using std::swap;
  swap(trajectory_builder_2d_options_, other->trajectory_builder_2d_options_);
  swap(trajectory_builder_3d_options_, other->trajectory_builder_3d_options_);
  swap(pure_localization_, other->pure_localization_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryBuilderOptions::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrajectoryBuilderOptions

// optional .cartographer.mapping_2d.proto.LocalTrajectoryBuilderOptions trajectory_builder_2d_options = 1;
bool TrajectoryBuilderOptions::has_trajectory_builder_2d_options() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrajectoryBuilderOptions::set_has_trajectory_builder_2d_options() {
  _has_bits_[0] |= 0x00000001u;
}
void TrajectoryBuilderOptions::clear_has_trajectory_builder_2d_options() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrajectoryBuilderOptions::clear_trajectory_builder_2d_options() {
  if (trajectory_builder_2d_options_ != NULL) trajectory_builder_2d_options_->::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions::Clear();
  clear_has_trajectory_builder_2d_options();
}
const ::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions& TrajectoryBuilderOptions::trajectory_builder_2d_options() const {
  const ::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions* p = trajectory_builder_2d_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_2d_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions*>(
      &::cartographer::mapping_2d::proto::_LocalTrajectoryBuilderOptions_default_instance_);
}
::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions* TrajectoryBuilderOptions::mutable_trajectory_builder_2d_options() {
  set_has_trajectory_builder_2d_options();
  if (trajectory_builder_2d_options_ == NULL) {
    trajectory_builder_2d_options_ = new ::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_2d_options)
  return trajectory_builder_2d_options_;
}
::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions* TrajectoryBuilderOptions::release_trajectory_builder_2d_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_2d_options)
  clear_has_trajectory_builder_2d_options();
  ::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions* temp = trajectory_builder_2d_options_;
  trajectory_builder_2d_options_ = NULL;
  return temp;
}
void TrajectoryBuilderOptions::set_allocated_trajectory_builder_2d_options(::cartographer::mapping_2d::proto::LocalTrajectoryBuilderOptions* trajectory_builder_2d_options) {
  delete trajectory_builder_2d_options_;
  trajectory_builder_2d_options_ = trajectory_builder_2d_options;
  if (trajectory_builder_2d_options) {
    set_has_trajectory_builder_2d_options();
  } else {
    clear_has_trajectory_builder_2d_options();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_2d_options)
}

// optional .cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions trajectory_builder_3d_options = 2;
bool TrajectoryBuilderOptions::has_trajectory_builder_3d_options() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrajectoryBuilderOptions::set_has_trajectory_builder_3d_options() {
  _has_bits_[0] |= 0x00000002u;
}
void TrajectoryBuilderOptions::clear_has_trajectory_builder_3d_options() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrajectoryBuilderOptions::clear_trajectory_builder_3d_options() {
  if (trajectory_builder_3d_options_ != NULL) trajectory_builder_3d_options_->::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions::Clear();
  clear_has_trajectory_builder_3d_options();
}
const ::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions& TrajectoryBuilderOptions::trajectory_builder_3d_options() const {
  const ::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions* p = trajectory_builder_3d_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_3d_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions*>(
      &::cartographer::mapping_3d::proto::_LocalTrajectoryBuilderOptions_default_instance_);
}
::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions* TrajectoryBuilderOptions::mutable_trajectory_builder_3d_options() {
  set_has_trajectory_builder_3d_options();
  if (trajectory_builder_3d_options_ == NULL) {
    trajectory_builder_3d_options_ = new ::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_3d_options)
  return trajectory_builder_3d_options_;
}
::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions* TrajectoryBuilderOptions::release_trajectory_builder_3d_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_3d_options)
  clear_has_trajectory_builder_3d_options();
  ::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions* temp = trajectory_builder_3d_options_;
  trajectory_builder_3d_options_ = NULL;
  return temp;
}
void TrajectoryBuilderOptions::set_allocated_trajectory_builder_3d_options(::cartographer::mapping_3d::proto::LocalTrajectoryBuilderOptions* trajectory_builder_3d_options) {
  delete trajectory_builder_3d_options_;
  trajectory_builder_3d_options_ = trajectory_builder_3d_options;
  if (trajectory_builder_3d_options) {
    set_has_trajectory_builder_3d_options();
  } else {
    clear_has_trajectory_builder_3d_options();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_3d_options)
}

// optional bool pure_localization = 3;
bool TrajectoryBuilderOptions::has_pure_localization() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrajectoryBuilderOptions::set_has_pure_localization() {
  _has_bits_[0] |= 0x00000004u;
}
void TrajectoryBuilderOptions::clear_has_pure_localization() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrajectoryBuilderOptions::clear_pure_localization() {
  pure_localization_ = false;
  clear_has_pure_localization();
}
bool TrajectoryBuilderOptions::pure_localization() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.pure_localization)
  return pure_localization_;
}
void TrajectoryBuilderOptions::set_pure_localization(bool value) {
  set_has_pure_localization();
  pure_localization_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryBuilderOptions.pure_localization)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
