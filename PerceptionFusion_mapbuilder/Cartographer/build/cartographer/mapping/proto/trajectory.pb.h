// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/trajectory.proto

#ifndef PROTOBUF_cartographer_2fmapping_2fproto_2ftrajectory_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_2fproto_2ftrajectory_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/transform/proto/transform.pb.h"
// @@protoc_insertion_point(includes)
namespace cartographer {
namespace mapping {
namespace proto {
class Trajectory;
class TrajectoryDefaultTypeInternal;
extern TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
class Trajectory_Node;
class Trajectory_NodeDefaultTypeInternal;
extern Trajectory_NodeDefaultTypeInternal _Trajectory_Node_default_instance_;
class Trajectory_Submap;
class Trajectory_SubmapDefaultTypeInternal;
extern Trajectory_SubmapDefaultTypeInternal _Trajectory_Submap_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

namespace cartographer {
namespace mapping {
namespace proto {

namespace protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto

// ===================================================================

class Trajectory_Node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.Trajectory.Node) */ {
 public:
  Trajectory_Node();
  virtual ~Trajectory_Node();

  Trajectory_Node(const Trajectory_Node& from);

  inline Trajectory_Node& operator=(const Trajectory_Node& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Trajectory_Node(Trajectory_Node&& from) noexcept
    : Trajectory_Node() {
    *this = ::std::move(from);
  }

  inline Trajectory_Node& operator=(Trajectory_Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Trajectory_Node& default_instance();

  static inline const Trajectory_Node* internal_default_instance() {
    return reinterpret_cast<const Trajectory_Node*>(
               &_Trajectory_Node_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Trajectory_Node* other);
  friend void swap(Trajectory_Node& a, Trajectory_Node& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Trajectory_Node* New() const PROTOBUF_FINAL { return New(NULL); }

  Trajectory_Node* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Trajectory_Node& from);
  void MergeFrom(const Trajectory_Node& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Trajectory_Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cartographer.transform.proto.Rigid3d pose = 5;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 5;
  const ::cartographer::transform::proto::Rigid3d& pose() const;
  ::cartographer::transform::proto::Rigid3d* mutable_pose();
  ::cartographer::transform::proto::Rigid3d* release_pose();
  void set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose);

  // optional int64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.Trajectory.Node)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_pose();
  void clear_has_pose();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cartographer::transform::proto::Rigid3d* pose_;
  ::google::protobuf::int64 timestamp_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Trajectory_Submap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.Trajectory.Submap) */ {
 public:
  Trajectory_Submap();
  virtual ~Trajectory_Submap();

  Trajectory_Submap(const Trajectory_Submap& from);

  inline Trajectory_Submap& operator=(const Trajectory_Submap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Trajectory_Submap(Trajectory_Submap&& from) noexcept
    : Trajectory_Submap() {
    *this = ::std::move(from);
  }

  inline Trajectory_Submap& operator=(Trajectory_Submap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Trajectory_Submap& default_instance();

  static inline const Trajectory_Submap* internal_default_instance() {
    return reinterpret_cast<const Trajectory_Submap*>(
               &_Trajectory_Submap_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Trajectory_Submap* other);
  friend void swap(Trajectory_Submap& a, Trajectory_Submap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Trajectory_Submap* New() const PROTOBUF_FINAL { return New(NULL); }

  Trajectory_Submap* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Trajectory_Submap& from);
  void MergeFrom(const Trajectory_Submap& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Trajectory_Submap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cartographer.transform.proto.Rigid3d pose = 1;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 1;
  const ::cartographer::transform::proto::Rigid3d& pose() const;
  ::cartographer::transform::proto::Rigid3d* mutable_pose();
  ::cartographer::transform::proto::Rigid3d* release_pose();
  void set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.Trajectory.Submap)
 private:
  void set_has_pose();
  void clear_has_pose();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cartographer::transform::proto::Rigid3d* pose_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Trajectory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.Trajectory) */ {
 public:
  Trajectory();
  virtual ~Trajectory();

  Trajectory(const Trajectory& from);

  inline Trajectory& operator=(const Trajectory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Trajectory(Trajectory&& from) noexcept
    : Trajectory() {
    *this = ::std::move(from);
  }

  inline Trajectory& operator=(Trajectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Trajectory& default_instance();

  static inline const Trajectory* internal_default_instance() {
    return reinterpret_cast<const Trajectory*>(
               &_Trajectory_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Trajectory* other);
  friend void swap(Trajectory& a, Trajectory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Trajectory* New() const PROTOBUF_FINAL { return New(NULL); }

  Trajectory* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Trajectory& from);
  void MergeFrom(const Trajectory& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Trajectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Trajectory_Node Node;
  typedef Trajectory_Submap Submap;

  // accessors -------------------------------------------------------

  // repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
  int node_size() const;
  void clear_node();
  static const int kNodeFieldNumber = 1;
  const ::cartographer::mapping::proto::Trajectory_Node& node(int index) const;
  ::cartographer::mapping::proto::Trajectory_Node* mutable_node(int index);
  ::cartographer::mapping::proto::Trajectory_Node* add_node();
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Node >*
      mutable_node();
  const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Node >&
      node() const;

  // repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
  int submap_size() const;
  void clear_submap();
  static const int kSubmapFieldNumber = 2;
  const ::cartographer::mapping::proto::Trajectory_Submap& submap(int index) const;
  ::cartographer::mapping::proto::Trajectory_Submap* mutable_submap(int index);
  ::cartographer::mapping::proto::Trajectory_Submap* add_submap();
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Submap >*
      mutable_submap();
  const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Submap >&
      submap() const;

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.Trajectory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Node > node_;
  ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Submap > submap_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Trajectory_Node

// optional int64 timestamp = 1;
inline bool Trajectory_Node::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Trajectory_Node::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Trajectory_Node::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Trajectory_Node::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 Trajectory_Node::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.Node.timestamp)
  return timestamp_;
}
inline void Trajectory_Node::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Trajectory.Node.timestamp)
}

// optional .cartographer.transform.proto.Rigid3d pose = 5;
inline bool Trajectory_Node::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Trajectory_Node::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Trajectory_Node::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Trajectory_Node::clear_pose() {
  if (pose_ != NULL) pose_->::cartographer::transform::proto::Rigid3d::Clear();
  clear_has_pose();
}
inline const ::cartographer::transform::proto::Rigid3d& Trajectory_Node::pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = pose_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.Node.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
inline ::cartographer::transform::proto::Rigid3d* Trajectory_Node::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Trajectory.Node.pose)
  return pose_;
}
inline ::cartographer::transform::proto::Rigid3d* Trajectory_Node::release_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Trajectory.Node.pose)
  clear_has_pose();
  ::cartographer::transform::proto::Rigid3d* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void Trajectory_Node::set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Trajectory.Node.pose)
}

// -------------------------------------------------------------------

// Trajectory_Submap

// optional .cartographer.transform.proto.Rigid3d pose = 1;
inline bool Trajectory_Submap::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Trajectory_Submap::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Trajectory_Submap::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Trajectory_Submap::clear_pose() {
  if (pose_ != NULL) pose_->::cartographer::transform::proto::Rigid3d::Clear();
  clear_has_pose();
}
inline const ::cartographer::transform::proto::Rigid3d& Trajectory_Submap::pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = pose_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.Submap.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
inline ::cartographer::transform::proto::Rigid3d* Trajectory_Submap::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::cartographer::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Trajectory.Submap.pose)
  return pose_;
}
inline ::cartographer::transform::proto::Rigid3d* Trajectory_Submap::release_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Trajectory.Submap.pose)
  clear_has_pose();
  ::cartographer::transform::proto::Rigid3d* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void Trajectory_Submap::set_allocated_pose(::cartographer::transform::proto::Rigid3d* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Trajectory.Submap.pose)
}

// -------------------------------------------------------------------

// Trajectory

// repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
inline int Trajectory::node_size() const {
  return node_.size();
}
inline void Trajectory::clear_node() {
  node_.Clear();
}
inline const ::cartographer::mapping::proto::Trajectory_Node& Trajectory::node(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.node)
  return node_.Get(index);
}
inline ::cartographer::mapping::proto::Trajectory_Node* Trajectory::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Trajectory.node)
  return node_.Mutable(index);
}
inline ::cartographer::mapping::proto::Trajectory_Node* Trajectory::add_node() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.Trajectory.node)
  return node_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Node >*
Trajectory::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.Trajectory.node)
  return &node_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Node >&
Trajectory::node() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.Trajectory.node)
  return node_;
}

// repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
inline int Trajectory::submap_size() const {
  return submap_.size();
}
inline void Trajectory::clear_submap() {
  submap_.Clear();
}
inline const ::cartographer::mapping::proto::Trajectory_Submap& Trajectory::submap(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.submap)
  return submap_.Get(index);
}
inline ::cartographer::mapping::proto::Trajectory_Submap* Trajectory::mutable_submap(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Trajectory.submap)
  return submap_.Mutable(index);
}
inline ::cartographer::mapping::proto::Trajectory_Submap* Trajectory::add_submap() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.Trajectory.submap)
  return submap_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Submap >*
Trajectory::mutable_submap() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.Trajectory.submap)
  return &submap_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cartographer::mapping::proto::Trajectory_Submap >&
Trajectory::submap() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.Trajectory.submap)
  return submap_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_2fproto_2ftrajectory_2eproto__INCLUDED
