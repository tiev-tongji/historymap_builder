// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/sparse_pose_graph/proto/constraint_builder_options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/sparse_pose_graph/proto/constraint_builder_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace sparse_pose_graph {
namespace proto {
class ConstraintBuilderOptionsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ConstraintBuilderOptions>
     _instance;
} _ConstraintBuilderOptions_default_instance_;

namespace protobuf_cartographer_2fmapping_2fsparse_5fpose_5fgraph_2fproto_2fconstraint_5fbuilder_5foptions_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintBuilderOptions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintBuilderOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintBuilderOptions, sampling_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintBuilderOptions, max_constraint_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintBuilderOptions, min_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintBuilderOptions, global_localization_min_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintBuilderOptions, loop_closure_translation_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintBuilderOptions, loop_closure_rotation_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintBuilderOptions, log_matches_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintBuilderOptions, fast_correlative_scan_matcher_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintBuilderOptions, ceres_scan_matcher_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintBuilderOptions, fast_correlative_scan_matcher_options_3d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintBuilderOptions, ceres_scan_matcher_options_3d_),
  4,
  5,
  6,
  7,
  9,
  10,
  8,
  0,
  2,
  1,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(ConstraintBuilderOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConstraintBuilderOptions_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/mapping/sparse_pose_graph/proto/constraint_builder_options.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::cartographer::mapping_2d::scan_matching::proto::protobuf_cartographer_2fmapping_5f2d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto::InitDefaults();
  ::cartographer::mapping_2d::scan_matching::proto::protobuf_cartographer_2fmapping_5f2d_2fscan_5fmatching_2fproto_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto::InitDefaults();
  ::cartographer::mapping_3d::scan_matching::proto::protobuf_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto::InitDefaults();
  ::cartographer::mapping_3d::scan_matching::proto::protobuf_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto::InitDefaults();
  _ConstraintBuilderOptions_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ConstraintBuilderOptions_default_instance_);_ConstraintBuilderOptions_default_instance_._instance.get_mutable()->fast_correlative_scan_matcher_options_ = const_cast< ::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions*>(
      ::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions::internal_default_instance());
  _ConstraintBuilderOptions_default_instance_._instance.get_mutable()->ceres_scan_matcher_options_ = const_cast< ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions*>(
      ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions::internal_default_instance());
  _ConstraintBuilderOptions_default_instance_._instance.get_mutable()->fast_correlative_scan_matcher_options_3d_ = const_cast< ::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions*>(
      ::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions::internal_default_instance());
  _ConstraintBuilderOptions_default_instance_._instance.get_mutable()->ceres_scan_matcher_options_3d_ = const_cast< ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions*>(
      ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\nMcartographer/mapping/sparse_pose_graph"
      "/proto/constraint_builder_options.proto\022"
      ",cartographer.mapping.sparse_pose_graph."
      "proto\032Lcartographer/mapping_2d/scan_matc"
      "hing/proto/ceres_scan_matcher_options.pr"
      "oto\032Wcartographer/mapping_2d/scan_matchi"
      "ng/proto/fast_correlative_scan_matcher_o"
      "ptions.proto\032Lcartographer/mapping_3d/sc"
      "an_matching/proto/ceres_scan_matcher_opt"
      "ions.proto\032Wcartographer/mapping_3d/scan"
      "_matching/proto/fast_correlative_scan_ma"
      "tcher_options.proto\"\312\005\n\030ConstraintBuilde"
      "rOptions\022\026\n\016sampling_ratio\030\001 \001(\001\022\037\n\027max_"
      "constraint_distance\030\002 \001(\001\022\021\n\tmin_score\030\004"
      " \001(\001\022%\n\035global_localization_min_score\030\005 "
      "\001(\001\022\'\n\037loop_closure_translation_weight\030\r"
      " \001(\001\022$\n\034loop_closure_rotation_weight\030\016 \001"
      "(\001\022\023\n\013log_matches\030\010 \001(\010\022}\n%fast_correlat"
      "ive_scan_matcher_options\030\t \001(\0132N.cartogr"
      "apher.mapping_2d.scan_matching.proto.Fas"
      "tCorrelativeScanMatcherOptions\022h\n\032ceres_"
      "scan_matcher_options\030\013 \001(\0132D.cartographe"
      "r.mapping_2d.scan_matching.proto.CeresSc"
      "anMatcherOptions\022\200\001\n(fast_correlative_sc"
      "an_matcher_options_3d\030\n \001(\0132N.cartograph"
      "er.mapping_3d.scan_matching.proto.FastCo"
      "rrelativeScanMatcherOptions\022k\n\035ceres_sca"
      "n_matcher_options_3d\030\014 \001(\0132D.cartographe"
      "r.mapping_3d.scan_matching.proto.CeresSc"
      "anMatcherOptions"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1176);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/sparse_pose_graph/proto/constraint_builder_options.proto", &protobuf_RegisterTypes);
  ::cartographer::mapping_2d::scan_matching::proto::protobuf_cartographer_2fmapping_5f2d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto::AddDescriptors();
  ::cartographer::mapping_2d::scan_matching::proto::protobuf_cartographer_2fmapping_5f2d_2fscan_5fmatching_2fproto_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto::AddDescriptors();
  ::cartographer::mapping_3d::scan_matching::proto::protobuf_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto::AddDescriptors();
  ::cartographer::mapping_3d::scan_matching::proto::protobuf_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cartographer_2fmapping_2fsparse_5fpose_5fgraph_2fproto_2fconstraint_5fbuilder_5foptions_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConstraintBuilderOptions::kSamplingRatioFieldNumber;
const int ConstraintBuilderOptions::kMaxConstraintDistanceFieldNumber;
const int ConstraintBuilderOptions::kMinScoreFieldNumber;
const int ConstraintBuilderOptions::kGlobalLocalizationMinScoreFieldNumber;
const int ConstraintBuilderOptions::kLoopClosureTranslationWeightFieldNumber;
const int ConstraintBuilderOptions::kLoopClosureRotationWeightFieldNumber;
const int ConstraintBuilderOptions::kLogMatchesFieldNumber;
const int ConstraintBuilderOptions::kFastCorrelativeScanMatcherOptionsFieldNumber;
const int ConstraintBuilderOptions::kCeresScanMatcherOptionsFieldNumber;
const int ConstraintBuilderOptions::kFastCorrelativeScanMatcherOptions3DFieldNumber;
const int ConstraintBuilderOptions::kCeresScanMatcherOptions3DFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConstraintBuilderOptions::ConstraintBuilderOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fsparse_5fpose_5fgraph_2fproto_2fconstraint_5fbuilder_5foptions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions)
}
ConstraintBuilderOptions::ConstraintBuilderOptions(const ConstraintBuilderOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fast_correlative_scan_matcher_options()) {
    fast_correlative_scan_matcher_options_ = new ::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions(*from.fast_correlative_scan_matcher_options_);
  } else {
    fast_correlative_scan_matcher_options_ = NULL;
  }
  if (from.has_fast_correlative_scan_matcher_options_3d()) {
    fast_correlative_scan_matcher_options_3d_ = new ::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions(*from.fast_correlative_scan_matcher_options_3d_);
  } else {
    fast_correlative_scan_matcher_options_3d_ = NULL;
  }
  if (from.has_ceres_scan_matcher_options()) {
    ceres_scan_matcher_options_ = new ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions(*from.ceres_scan_matcher_options_);
  } else {
    ceres_scan_matcher_options_ = NULL;
  }
  if (from.has_ceres_scan_matcher_options_3d()) {
    ceres_scan_matcher_options_3d_ = new ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions(*from.ceres_scan_matcher_options_3d_);
  } else {
    ceres_scan_matcher_options_3d_ = NULL;
  }
  ::memcpy(&sampling_ratio_, &from.sampling_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&loop_closure_rotation_weight_) -
    reinterpret_cast<char*>(&sampling_ratio_)) + sizeof(loop_closure_rotation_weight_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions)
}

void ConstraintBuilderOptions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fast_correlative_scan_matcher_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&loop_closure_rotation_weight_) -
      reinterpret_cast<char*>(&fast_correlative_scan_matcher_options_)) + sizeof(loop_closure_rotation_weight_));
}

ConstraintBuilderOptions::~ConstraintBuilderOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions)
  SharedDtor();
}

void ConstraintBuilderOptions::SharedDtor() {
  if (this != internal_default_instance()) delete fast_correlative_scan_matcher_options_;
  if (this != internal_default_instance()) delete fast_correlative_scan_matcher_options_3d_;
  if (this != internal_default_instance()) delete ceres_scan_matcher_options_;
  if (this != internal_default_instance()) delete ceres_scan_matcher_options_3d_;
}

void ConstraintBuilderOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConstraintBuilderOptions::descriptor() {
  protobuf_cartographer_2fmapping_2fsparse_5fpose_5fgraph_2fproto_2fconstraint_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fsparse_5fpose_5fgraph_2fproto_2fconstraint_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConstraintBuilderOptions& ConstraintBuilderOptions::default_instance() {
  protobuf_cartographer_2fmapping_2fsparse_5fpose_5fgraph_2fproto_2fconstraint_5fbuilder_5foptions_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConstraintBuilderOptions* ConstraintBuilderOptions::New(::google::protobuf::Arena* arena) const {
  ConstraintBuilderOptions* n = new ConstraintBuilderOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConstraintBuilderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(fast_correlative_scan_matcher_options_ != NULL);
      fast_correlative_scan_matcher_options_->::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(fast_correlative_scan_matcher_options_3d_ != NULL);
      fast_correlative_scan_matcher_options_3d_->::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ceres_scan_matcher_options_ != NULL);
      ceres_scan_matcher_options_->::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ceres_scan_matcher_options_3d_ != NULL);
      ceres_scan_matcher_options_3d_->::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions::Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&sampling_ratio_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&global_localization_min_score_) -
        reinterpret_cast<char*>(&sampling_ratio_)) + sizeof(global_localization_min_score_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&log_matches_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&loop_closure_rotation_weight_) -
        reinterpret_cast<char*>(&log_matches_)) + sizeof(loop_closure_rotation_weight_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConstraintBuilderOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double sampling_ratio = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_sampling_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sampling_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_constraint_distance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_max_constraint_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_constraint_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_score = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_min_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double global_localization_min_score = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_global_localization_min_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &global_localization_min_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool log_matches = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_log_matches();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &log_matches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.mapping_2d.scan_matching.proto.FastCorrelativeScanMatcherOptions fast_correlative_scan_matcher_options = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fast_correlative_scan_matcher_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.mapping_3d.scan_matching.proto.FastCorrelativeScanMatcherOptions fast_correlative_scan_matcher_options_3d = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fast_correlative_scan_matcher_options_3d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.mapping_2d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ceres_scan_matcher_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options_3d = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ceres_scan_matcher_options_3d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double loop_closure_translation_weight = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_loop_closure_translation_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loop_closure_translation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double loop_closure_rotation_weight = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_loop_closure_rotation_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loop_closure_rotation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions)
  return false;
#undef DO_
}

void ConstraintBuilderOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double sampling_ratio = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->sampling_ratio(), output);
  }

  // optional double max_constraint_distance = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_constraint_distance(), output);
  }

  // optional double min_score = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->min_score(), output);
  }

  // optional double global_localization_min_score = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->global_localization_min_score(), output);
  }

  // optional bool log_matches = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->log_matches(), output);
  }

  // optional .cartographer.mapping_2d.scan_matching.proto.FastCorrelativeScanMatcherOptions fast_correlative_scan_matcher_options = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->fast_correlative_scan_matcher_options_, output);
  }

  // optional .cartographer.mapping_3d.scan_matching.proto.FastCorrelativeScanMatcherOptions fast_correlative_scan_matcher_options_3d = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->fast_correlative_scan_matcher_options_3d_, output);
  }

  // optional .cartographer.mapping_2d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->ceres_scan_matcher_options_, output);
  }

  // optional .cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options_3d = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->ceres_scan_matcher_options_3d_, output);
  }

  // optional double loop_closure_translation_weight = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->loop_closure_translation_weight(), output);
  }

  // optional double loop_closure_rotation_weight = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->loop_closure_rotation_weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions)
}

::google::protobuf::uint8* ConstraintBuilderOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double sampling_ratio = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->sampling_ratio(), target);
  }

  // optional double max_constraint_distance = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_constraint_distance(), target);
  }

  // optional double min_score = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->min_score(), target);
  }

  // optional double global_localization_min_score = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->global_localization_min_score(), target);
  }

  // optional bool log_matches = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->log_matches(), target);
  }

  // optional .cartographer.mapping_2d.scan_matching.proto.FastCorrelativeScanMatcherOptions fast_correlative_scan_matcher_options = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->fast_correlative_scan_matcher_options_, deterministic, target);
  }

  // optional .cartographer.mapping_3d.scan_matching.proto.FastCorrelativeScanMatcherOptions fast_correlative_scan_matcher_options_3d = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->fast_correlative_scan_matcher_options_3d_, deterministic, target);
  }

  // optional .cartographer.mapping_2d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->ceres_scan_matcher_options_, deterministic, target);
  }

  // optional .cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options_3d = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->ceres_scan_matcher_options_3d_, deterministic, target);
  }

  // optional double loop_closure_translation_weight = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->loop_closure_translation_weight(), target);
  }

  // optional double loop_closure_rotation_weight = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->loop_closure_rotation_weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions)
  return target;
}

size_t ConstraintBuilderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .cartographer.mapping_2d.scan_matching.proto.FastCorrelativeScanMatcherOptions fast_correlative_scan_matcher_options = 9;
    if (has_fast_correlative_scan_matcher_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fast_correlative_scan_matcher_options_);
    }

    // optional .cartographer.mapping_3d.scan_matching.proto.FastCorrelativeScanMatcherOptions fast_correlative_scan_matcher_options_3d = 10;
    if (has_fast_correlative_scan_matcher_options_3d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fast_correlative_scan_matcher_options_3d_);
    }

    // optional .cartographer.mapping_2d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 11;
    if (has_ceres_scan_matcher_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ceres_scan_matcher_options_);
    }

    // optional .cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options_3d = 12;
    if (has_ceres_scan_matcher_options_3d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ceres_scan_matcher_options_3d_);
    }

    // optional double sampling_ratio = 1;
    if (has_sampling_ratio()) {
      total_size += 1 + 8;
    }

    // optional double max_constraint_distance = 2;
    if (has_max_constraint_distance()) {
      total_size += 1 + 8;
    }

    // optional double min_score = 4;
    if (has_min_score()) {
      total_size += 1 + 8;
    }

    // optional double global_localization_min_score = 5;
    if (has_global_localization_min_score()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional bool log_matches = 8;
    if (has_log_matches()) {
      total_size += 1 + 1;
    }

    // optional double loop_closure_translation_weight = 13;
    if (has_loop_closure_translation_weight()) {
      total_size += 1 + 8;
    }

    // optional double loop_closure_rotation_weight = 14;
    if (has_loop_closure_rotation_weight()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConstraintBuilderOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ConstraintBuilderOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConstraintBuilderOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions)
    MergeFrom(*source);
  }
}

void ConstraintBuilderOptions::MergeFrom(const ConstraintBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fast_correlative_scan_matcher_options()->::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions::MergeFrom(from.fast_correlative_scan_matcher_options());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_fast_correlative_scan_matcher_options_3d()->::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions::MergeFrom(from.fast_correlative_scan_matcher_options_3d());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ceres_scan_matcher_options()->::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions::MergeFrom(from.ceres_scan_matcher_options());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_ceres_scan_matcher_options_3d()->::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions::MergeFrom(from.ceres_scan_matcher_options_3d());
    }
    if (cached_has_bits & 0x00000010u) {
      sampling_ratio_ = from.sampling_ratio_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_constraint_distance_ = from.max_constraint_distance_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_score_ = from.min_score_;
    }
    if (cached_has_bits & 0x00000080u) {
      global_localization_min_score_ = from.global_localization_min_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      log_matches_ = from.log_matches_;
    }
    if (cached_has_bits & 0x00000200u) {
      loop_closure_translation_weight_ = from.loop_closure_translation_weight_;
    }
    if (cached_has_bits & 0x00000400u) {
      loop_closure_rotation_weight_ = from.loop_closure_rotation_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConstraintBuilderOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstraintBuilderOptions::CopyFrom(const ConstraintBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstraintBuilderOptions::IsInitialized() const {
  return true;
}

void ConstraintBuilderOptions::Swap(ConstraintBuilderOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConstraintBuilderOptions::InternalSwap(ConstraintBuilderOptions* other) {
  using std::swap;
  swap(fast_correlative_scan_matcher_options_, other->fast_correlative_scan_matcher_options_);
  swap(fast_correlative_scan_matcher_options_3d_, other->fast_correlative_scan_matcher_options_3d_);
  swap(ceres_scan_matcher_options_, other->ceres_scan_matcher_options_);
  swap(ceres_scan_matcher_options_3d_, other->ceres_scan_matcher_options_3d_);
  swap(sampling_ratio_, other->sampling_ratio_);
  swap(max_constraint_distance_, other->max_constraint_distance_);
  swap(min_score_, other->min_score_);
  swap(global_localization_min_score_, other->global_localization_min_score_);
  swap(log_matches_, other->log_matches_);
  swap(loop_closure_translation_weight_, other->loop_closure_translation_weight_);
  swap(loop_closure_rotation_weight_, other->loop_closure_rotation_weight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConstraintBuilderOptions::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fsparse_5fpose_5fgraph_2fproto_2fconstraint_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fsparse_5fpose_5fgraph_2fproto_2fconstraint_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConstraintBuilderOptions

// optional double sampling_ratio = 1;
bool ConstraintBuilderOptions::has_sampling_ratio() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ConstraintBuilderOptions::set_has_sampling_ratio() {
  _has_bits_[0] |= 0x00000010u;
}
void ConstraintBuilderOptions::clear_has_sampling_ratio() {
  _has_bits_[0] &= ~0x00000010u;
}
void ConstraintBuilderOptions::clear_sampling_ratio() {
  sampling_ratio_ = 0;
  clear_has_sampling_ratio();
}
double ConstraintBuilderOptions::sampling_ratio() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.sampling_ratio)
  return sampling_ratio_;
}
void ConstraintBuilderOptions::set_sampling_ratio(double value) {
  set_has_sampling_ratio();
  sampling_ratio_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.sampling_ratio)
}

// optional double max_constraint_distance = 2;
bool ConstraintBuilderOptions::has_max_constraint_distance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ConstraintBuilderOptions::set_has_max_constraint_distance() {
  _has_bits_[0] |= 0x00000020u;
}
void ConstraintBuilderOptions::clear_has_max_constraint_distance() {
  _has_bits_[0] &= ~0x00000020u;
}
void ConstraintBuilderOptions::clear_max_constraint_distance() {
  max_constraint_distance_ = 0;
  clear_has_max_constraint_distance();
}
double ConstraintBuilderOptions::max_constraint_distance() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.max_constraint_distance)
  return max_constraint_distance_;
}
void ConstraintBuilderOptions::set_max_constraint_distance(double value) {
  set_has_max_constraint_distance();
  max_constraint_distance_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.max_constraint_distance)
}

// optional double min_score = 4;
bool ConstraintBuilderOptions::has_min_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ConstraintBuilderOptions::set_has_min_score() {
  _has_bits_[0] |= 0x00000040u;
}
void ConstraintBuilderOptions::clear_has_min_score() {
  _has_bits_[0] &= ~0x00000040u;
}
void ConstraintBuilderOptions::clear_min_score() {
  min_score_ = 0;
  clear_has_min_score();
}
double ConstraintBuilderOptions::min_score() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.min_score)
  return min_score_;
}
void ConstraintBuilderOptions::set_min_score(double value) {
  set_has_min_score();
  min_score_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.min_score)
}

// optional double global_localization_min_score = 5;
bool ConstraintBuilderOptions::has_global_localization_min_score() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ConstraintBuilderOptions::set_has_global_localization_min_score() {
  _has_bits_[0] |= 0x00000080u;
}
void ConstraintBuilderOptions::clear_has_global_localization_min_score() {
  _has_bits_[0] &= ~0x00000080u;
}
void ConstraintBuilderOptions::clear_global_localization_min_score() {
  global_localization_min_score_ = 0;
  clear_has_global_localization_min_score();
}
double ConstraintBuilderOptions::global_localization_min_score() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.global_localization_min_score)
  return global_localization_min_score_;
}
void ConstraintBuilderOptions::set_global_localization_min_score(double value) {
  set_has_global_localization_min_score();
  global_localization_min_score_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.global_localization_min_score)
}

// optional double loop_closure_translation_weight = 13;
bool ConstraintBuilderOptions::has_loop_closure_translation_weight() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ConstraintBuilderOptions::set_has_loop_closure_translation_weight() {
  _has_bits_[0] |= 0x00000200u;
}
void ConstraintBuilderOptions::clear_has_loop_closure_translation_weight() {
  _has_bits_[0] &= ~0x00000200u;
}
void ConstraintBuilderOptions::clear_loop_closure_translation_weight() {
  loop_closure_translation_weight_ = 0;
  clear_has_loop_closure_translation_weight();
}
double ConstraintBuilderOptions::loop_closure_translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.loop_closure_translation_weight)
  return loop_closure_translation_weight_;
}
void ConstraintBuilderOptions::set_loop_closure_translation_weight(double value) {
  set_has_loop_closure_translation_weight();
  loop_closure_translation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.loop_closure_translation_weight)
}

// optional double loop_closure_rotation_weight = 14;
bool ConstraintBuilderOptions::has_loop_closure_rotation_weight() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ConstraintBuilderOptions::set_has_loop_closure_rotation_weight() {
  _has_bits_[0] |= 0x00000400u;
}
void ConstraintBuilderOptions::clear_has_loop_closure_rotation_weight() {
  _has_bits_[0] &= ~0x00000400u;
}
void ConstraintBuilderOptions::clear_loop_closure_rotation_weight() {
  loop_closure_rotation_weight_ = 0;
  clear_has_loop_closure_rotation_weight();
}
double ConstraintBuilderOptions::loop_closure_rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.loop_closure_rotation_weight)
  return loop_closure_rotation_weight_;
}
void ConstraintBuilderOptions::set_loop_closure_rotation_weight(double value) {
  set_has_loop_closure_rotation_weight();
  loop_closure_rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.loop_closure_rotation_weight)
}

// optional bool log_matches = 8;
bool ConstraintBuilderOptions::has_log_matches() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ConstraintBuilderOptions::set_has_log_matches() {
  _has_bits_[0] |= 0x00000100u;
}
void ConstraintBuilderOptions::clear_has_log_matches() {
  _has_bits_[0] &= ~0x00000100u;
}
void ConstraintBuilderOptions::clear_log_matches() {
  log_matches_ = false;
  clear_has_log_matches();
}
bool ConstraintBuilderOptions::log_matches() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.log_matches)
  return log_matches_;
}
void ConstraintBuilderOptions::set_log_matches(bool value) {
  set_has_log_matches();
  log_matches_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.log_matches)
}

// optional .cartographer.mapping_2d.scan_matching.proto.FastCorrelativeScanMatcherOptions fast_correlative_scan_matcher_options = 9;
bool ConstraintBuilderOptions::has_fast_correlative_scan_matcher_options() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConstraintBuilderOptions::set_has_fast_correlative_scan_matcher_options() {
  _has_bits_[0] |= 0x00000001u;
}
void ConstraintBuilderOptions::clear_has_fast_correlative_scan_matcher_options() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConstraintBuilderOptions::clear_fast_correlative_scan_matcher_options() {
  if (fast_correlative_scan_matcher_options_ != NULL) fast_correlative_scan_matcher_options_->::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions::Clear();
  clear_has_fast_correlative_scan_matcher_options();
}
const ::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions& ConstraintBuilderOptions::fast_correlative_scan_matcher_options() const {
  const ::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions* p = fast_correlative_scan_matcher_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.fast_correlative_scan_matcher_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions*>(
      &::cartographer::mapping_2d::scan_matching::proto::_FastCorrelativeScanMatcherOptions_default_instance_);
}
::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions* ConstraintBuilderOptions::mutable_fast_correlative_scan_matcher_options() {
  set_has_fast_correlative_scan_matcher_options();
  if (fast_correlative_scan_matcher_options_ == NULL) {
    fast_correlative_scan_matcher_options_ = new ::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.fast_correlative_scan_matcher_options)
  return fast_correlative_scan_matcher_options_;
}
::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions* ConstraintBuilderOptions::release_fast_correlative_scan_matcher_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.fast_correlative_scan_matcher_options)
  clear_has_fast_correlative_scan_matcher_options();
  ::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions* temp = fast_correlative_scan_matcher_options_;
  fast_correlative_scan_matcher_options_ = NULL;
  return temp;
}
void ConstraintBuilderOptions::set_allocated_fast_correlative_scan_matcher_options(::cartographer::mapping_2d::scan_matching::proto::FastCorrelativeScanMatcherOptions* fast_correlative_scan_matcher_options) {
  delete fast_correlative_scan_matcher_options_;
  fast_correlative_scan_matcher_options_ = fast_correlative_scan_matcher_options;
  if (fast_correlative_scan_matcher_options) {
    set_has_fast_correlative_scan_matcher_options();
  } else {
    clear_has_fast_correlative_scan_matcher_options();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.fast_correlative_scan_matcher_options)
}

// optional .cartographer.mapping_2d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 11;
bool ConstraintBuilderOptions::has_ceres_scan_matcher_options() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConstraintBuilderOptions::set_has_ceres_scan_matcher_options() {
  _has_bits_[0] |= 0x00000004u;
}
void ConstraintBuilderOptions::clear_has_ceres_scan_matcher_options() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConstraintBuilderOptions::clear_ceres_scan_matcher_options() {
  if (ceres_scan_matcher_options_ != NULL) ceres_scan_matcher_options_->::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions::Clear();
  clear_has_ceres_scan_matcher_options();
}
const ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions& ConstraintBuilderOptions::ceres_scan_matcher_options() const {
  const ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* p = ceres_scan_matcher_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.ceres_scan_matcher_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions*>(
      &::cartographer::mapping_2d::scan_matching::proto::_CeresScanMatcherOptions_default_instance_);
}
::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* ConstraintBuilderOptions::mutable_ceres_scan_matcher_options() {
  set_has_ceres_scan_matcher_options();
  if (ceres_scan_matcher_options_ == NULL) {
    ceres_scan_matcher_options_ = new ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.ceres_scan_matcher_options)
  return ceres_scan_matcher_options_;
}
::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* ConstraintBuilderOptions::release_ceres_scan_matcher_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.ceres_scan_matcher_options)
  clear_has_ceres_scan_matcher_options();
  ::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* temp = ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = NULL;
  return temp;
}
void ConstraintBuilderOptions::set_allocated_ceres_scan_matcher_options(::cartographer::mapping_2d::scan_matching::proto::CeresScanMatcherOptions* ceres_scan_matcher_options) {
  delete ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = ceres_scan_matcher_options;
  if (ceres_scan_matcher_options) {
    set_has_ceres_scan_matcher_options();
  } else {
    clear_has_ceres_scan_matcher_options();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.ceres_scan_matcher_options)
}

// optional .cartographer.mapping_3d.scan_matching.proto.FastCorrelativeScanMatcherOptions fast_correlative_scan_matcher_options_3d = 10;
bool ConstraintBuilderOptions::has_fast_correlative_scan_matcher_options_3d() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConstraintBuilderOptions::set_has_fast_correlative_scan_matcher_options_3d() {
  _has_bits_[0] |= 0x00000002u;
}
void ConstraintBuilderOptions::clear_has_fast_correlative_scan_matcher_options_3d() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConstraintBuilderOptions::clear_fast_correlative_scan_matcher_options_3d() {
  if (fast_correlative_scan_matcher_options_3d_ != NULL) fast_correlative_scan_matcher_options_3d_->::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions::Clear();
  clear_has_fast_correlative_scan_matcher_options_3d();
}
const ::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions& ConstraintBuilderOptions::fast_correlative_scan_matcher_options_3d() const {
  const ::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions* p = fast_correlative_scan_matcher_options_3d_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.fast_correlative_scan_matcher_options_3d)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions*>(
      &::cartographer::mapping_3d::scan_matching::proto::_FastCorrelativeScanMatcherOptions_default_instance_);
}
::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions* ConstraintBuilderOptions::mutable_fast_correlative_scan_matcher_options_3d() {
  set_has_fast_correlative_scan_matcher_options_3d();
  if (fast_correlative_scan_matcher_options_3d_ == NULL) {
    fast_correlative_scan_matcher_options_3d_ = new ::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.fast_correlative_scan_matcher_options_3d)
  return fast_correlative_scan_matcher_options_3d_;
}
::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions* ConstraintBuilderOptions::release_fast_correlative_scan_matcher_options_3d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.fast_correlative_scan_matcher_options_3d)
  clear_has_fast_correlative_scan_matcher_options_3d();
  ::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions* temp = fast_correlative_scan_matcher_options_3d_;
  fast_correlative_scan_matcher_options_3d_ = NULL;
  return temp;
}
void ConstraintBuilderOptions::set_allocated_fast_correlative_scan_matcher_options_3d(::cartographer::mapping_3d::scan_matching::proto::FastCorrelativeScanMatcherOptions* fast_correlative_scan_matcher_options_3d) {
  delete fast_correlative_scan_matcher_options_3d_;
  fast_correlative_scan_matcher_options_3d_ = fast_correlative_scan_matcher_options_3d;
  if (fast_correlative_scan_matcher_options_3d) {
    set_has_fast_correlative_scan_matcher_options_3d();
  } else {
    clear_has_fast_correlative_scan_matcher_options_3d();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.fast_correlative_scan_matcher_options_3d)
}

// optional .cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options_3d = 12;
bool ConstraintBuilderOptions::has_ceres_scan_matcher_options_3d() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConstraintBuilderOptions::set_has_ceres_scan_matcher_options_3d() {
  _has_bits_[0] |= 0x00000008u;
}
void ConstraintBuilderOptions::clear_has_ceres_scan_matcher_options_3d() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConstraintBuilderOptions::clear_ceres_scan_matcher_options_3d() {
  if (ceres_scan_matcher_options_3d_ != NULL) ceres_scan_matcher_options_3d_->::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions::Clear();
  clear_has_ceres_scan_matcher_options_3d();
}
const ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions& ConstraintBuilderOptions::ceres_scan_matcher_options_3d() const {
  const ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* p = ceres_scan_matcher_options_3d_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.ceres_scan_matcher_options_3d)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions*>(
      &::cartographer::mapping_3d::scan_matching::proto::_CeresScanMatcherOptions_default_instance_);
}
::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* ConstraintBuilderOptions::mutable_ceres_scan_matcher_options_3d() {
  set_has_ceres_scan_matcher_options_3d();
  if (ceres_scan_matcher_options_3d_ == NULL) {
    ceres_scan_matcher_options_3d_ = new ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.ceres_scan_matcher_options_3d)
  return ceres_scan_matcher_options_3d_;
}
::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* ConstraintBuilderOptions::release_ceres_scan_matcher_options_3d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.ceres_scan_matcher_options_3d)
  clear_has_ceres_scan_matcher_options_3d();
  ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* temp = ceres_scan_matcher_options_3d_;
  ceres_scan_matcher_options_3d_ = NULL;
  return temp;
}
void ConstraintBuilderOptions::set_allocated_ceres_scan_matcher_options_3d(::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* ceres_scan_matcher_options_3d) {
  delete ceres_scan_matcher_options_3d_;
  ceres_scan_matcher_options_3d_ = ceres_scan_matcher_options_3d;
  if (ceres_scan_matcher_options_3d) {
    set_has_ceres_scan_matcher_options_3d();
  } else {
    clear_has_ceres_scan_matcher_options_3d();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.sparse_pose_graph.proto.ConstraintBuilderOptions.ceres_scan_matcher_options_3d)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sparse_pose_graph
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
