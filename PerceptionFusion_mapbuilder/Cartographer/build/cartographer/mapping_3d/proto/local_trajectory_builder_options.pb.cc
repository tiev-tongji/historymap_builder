// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping_3d/proto/local_trajectory_builder_options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping_3d/proto/local_trajectory_builder_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping_3d {
namespace proto {
class LocalTrajectoryBuilderOptionsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LocalTrajectoryBuilderOptions>
     _instance;
} _LocalTrajectoryBuilderOptions_default_instance_;

namespace protobuf_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, min_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, max_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, scans_per_accumulation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, voxel_filter_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, high_resolution_adaptive_voxel_filter_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, low_resolution_adaptive_voxel_filter_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, use_online_correlative_scan_matching_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, real_time_correlative_scan_matcher_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, ceres_scan_matcher_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, motion_filter_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, imu_gravity_time_constant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, rotational_histogram_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions, submaps_options_),
  6,
  7,
  8,
  9,
  0,
  4,
  11,
  5,
  1,
  2,
  10,
  12,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(LocalTrajectoryBuilderOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LocalTrajectoryBuilderOptions_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/mapping_3d/proto/local_trajectory_builder_options.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::cartographer::mapping_3d::proto::protobuf_cartographer_2fmapping_5f3d_2fproto_2fmotion_5ffilter_5foptions_2eproto::InitDefaults();
  ::cartographer::sensor::proto::protobuf_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto::InitDefaults();
  ::cartographer::mapping_2d::scan_matching::proto::protobuf_cartographer_2fmapping_5f2d_2fscan_5fmatching_2fproto_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto::InitDefaults();
  ::cartographer::mapping_3d::proto::protobuf_cartographer_2fmapping_5f3d_2fproto_2fsubmaps_5foptions_2eproto::InitDefaults();
  ::cartographer::mapping_3d::scan_matching::proto::protobuf_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto::InitDefaults();
  _LocalTrajectoryBuilderOptions_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LocalTrajectoryBuilderOptions_default_instance_);_LocalTrajectoryBuilderOptions_default_instance_._instance.get_mutable()->high_resolution_adaptive_voxel_filter_options_ = const_cast< ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions*>(
      ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::internal_default_instance());
  _LocalTrajectoryBuilderOptions_default_instance_._instance.get_mutable()->low_resolution_adaptive_voxel_filter_options_ = const_cast< ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions*>(
      ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::internal_default_instance());
  _LocalTrajectoryBuilderOptions_default_instance_._instance.get_mutable()->real_time_correlative_scan_matcher_options_ = const_cast< ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions*>(
      ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions::internal_default_instance());
  _LocalTrajectoryBuilderOptions_default_instance_._instance.get_mutable()->ceres_scan_matcher_options_ = const_cast< ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions*>(
      ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions::internal_default_instance());
  _LocalTrajectoryBuilderOptions_default_instance_._instance.get_mutable()->motion_filter_options_ = const_cast< ::cartographer::mapping_3d::proto::MotionFilterOptions*>(
      ::cartographer::mapping_3d::proto::MotionFilterOptions::internal_default_instance());
  _LocalTrajectoryBuilderOptions_default_instance_._instance.get_mutable()->submaps_options_ = const_cast< ::cartographer::mapping_3d::proto::SubmapsOptions*>(
      ::cartographer::mapping_3d::proto::SubmapsOptions::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\nDcartographer/mapping_3d/proto/local_tr"
      "ajectory_builder_options.proto\022\035cartogra"
      "pher.mapping_3d.proto\0329cartographer/mapp"
      "ing_3d/proto/motion_filter_options.proto"
      "\032=cartographer/sensor/proto/adaptive_vox"
      "el_filter_options.proto\032\\cartographer/ma"
      "pping_2d/scan_matching/proto/real_time_c"
      "orrelative_scan_matcher_options.proto\0323c"
      "artographer/mapping_3d/proto/submaps_opt"
      "ions.proto\032Lcartographer/mapping_3d/scan"
      "_matching/proto/ceres_scan_matcher_optio"
      "ns.proto\"\335\006\n\035LocalTrajectoryBuilderOptio"
      "ns\022\021\n\tmin_range\030\001 \001(\002\022\021\n\tmax_range\030\002 \001(\002"
      "\022\036\n\026scans_per_accumulation\030\003 \001(\005\022\031\n\021voxe"
      "l_filter_size\030\004 \001(\002\022l\n-high_resolution_a"
      "daptive_voxel_filter_options\030\005 \001(\01325.car"
      "tographer.sensor.proto.AdaptiveVoxelFilt"
      "erOptions\022k\n,low_resolution_adaptive_vox"
      "el_filter_options\030\014 \001(\01325.cartographer.s"
      "ensor.proto.AdaptiveVoxelFilterOptions\022,"
      "\n$use_online_correlative_scan_matching\030\r"
      " \001(\010\022\206\001\n*real_time_correlative_scan_matc"
      "her_options\030\016 \001(\0132R.cartographer.mapping"
      "_2d.scan_matching.proto.RealTimeCorrelat"
      "iveScanMatcherOptions\022h\n\032ceres_scan_matc"
      "her_options\030\006 \001(\0132D.cartographer.mapping"
      "_3d.scan_matching.proto.CeresScanMatcher"
      "Options\022Q\n\025motion_filter_options\030\007 \001(\01322"
      ".cartographer.mapping_3d.proto.MotionFil"
      "terOptions\022!\n\031imu_gravity_time_constant\030"
      "\017 \001(\001\022!\n\031rotational_histogram_size\030\021 \001(\005"
      "\022F\n\017submaps_options\030\010 \001(\0132-.cartographer"
      ".mapping_3d.proto.SubmapsOptions"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1312);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping_3d/proto/local_trajectory_builder_options.proto", &protobuf_RegisterTypes);
  ::cartographer::mapping_3d::proto::protobuf_cartographer_2fmapping_5f3d_2fproto_2fmotion_5ffilter_5foptions_2eproto::AddDescriptors();
  ::cartographer::sensor::proto::protobuf_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto::AddDescriptors();
  ::cartographer::mapping_2d::scan_matching::proto::protobuf_cartographer_2fmapping_5f2d_2fscan_5fmatching_2fproto_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto::AddDescriptors();
  ::cartographer::mapping_3d::proto::protobuf_cartographer_2fmapping_5f3d_2fproto_2fsubmaps_5foptions_2eproto::AddDescriptors();
  ::cartographer::mapping_3d::scan_matching::proto::protobuf_cartographer_2fmapping_5f3d_2fscan_5fmatching_2fproto_2fceres_5fscan_5fmatcher_5foptions_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalTrajectoryBuilderOptions::kMinRangeFieldNumber;
const int LocalTrajectoryBuilderOptions::kMaxRangeFieldNumber;
const int LocalTrajectoryBuilderOptions::kScansPerAccumulationFieldNumber;
const int LocalTrajectoryBuilderOptions::kVoxelFilterSizeFieldNumber;
const int LocalTrajectoryBuilderOptions::kHighResolutionAdaptiveVoxelFilterOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions::kLowResolutionAdaptiveVoxelFilterOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions::kUseOnlineCorrelativeScanMatchingFieldNumber;
const int LocalTrajectoryBuilderOptions::kRealTimeCorrelativeScanMatcherOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions::kCeresScanMatcherOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions::kMotionFilterOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions::kImuGravityTimeConstantFieldNumber;
const int LocalTrajectoryBuilderOptions::kRotationalHistogramSizeFieldNumber;
const int LocalTrajectoryBuilderOptions::kSubmapsOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalTrajectoryBuilderOptions::LocalTrajectoryBuilderOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions)
}
LocalTrajectoryBuilderOptions::LocalTrajectoryBuilderOptions(const LocalTrajectoryBuilderOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_high_resolution_adaptive_voxel_filter_options()) {
    high_resolution_adaptive_voxel_filter_options_ = new ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions(*from.high_resolution_adaptive_voxel_filter_options_);
  } else {
    high_resolution_adaptive_voxel_filter_options_ = NULL;
  }
  if (from.has_ceres_scan_matcher_options()) {
    ceres_scan_matcher_options_ = new ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions(*from.ceres_scan_matcher_options_);
  } else {
    ceres_scan_matcher_options_ = NULL;
  }
  if (from.has_motion_filter_options()) {
    motion_filter_options_ = new ::cartographer::mapping_3d::proto::MotionFilterOptions(*from.motion_filter_options_);
  } else {
    motion_filter_options_ = NULL;
  }
  if (from.has_submaps_options()) {
    submaps_options_ = new ::cartographer::mapping_3d::proto::SubmapsOptions(*from.submaps_options_);
  } else {
    submaps_options_ = NULL;
  }
  if (from.has_low_resolution_adaptive_voxel_filter_options()) {
    low_resolution_adaptive_voxel_filter_options_ = new ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions(*from.low_resolution_adaptive_voxel_filter_options_);
  } else {
    low_resolution_adaptive_voxel_filter_options_ = NULL;
  }
  if (from.has_real_time_correlative_scan_matcher_options()) {
    real_time_correlative_scan_matcher_options_ = new ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions(*from.real_time_correlative_scan_matcher_options_);
  } else {
    real_time_correlative_scan_matcher_options_ = NULL;
  }
  ::memcpy(&min_range_, &from.min_range_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotational_histogram_size_) -
    reinterpret_cast<char*>(&min_range_)) + sizeof(rotational_histogram_size_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions)
}

void LocalTrajectoryBuilderOptions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&high_resolution_adaptive_voxel_filter_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotational_histogram_size_) -
      reinterpret_cast<char*>(&high_resolution_adaptive_voxel_filter_options_)) + sizeof(rotational_histogram_size_));
}

LocalTrajectoryBuilderOptions::~LocalTrajectoryBuilderOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions)
  SharedDtor();
}

void LocalTrajectoryBuilderOptions::SharedDtor() {
  if (this != internal_default_instance()) delete high_resolution_adaptive_voxel_filter_options_;
  if (this != internal_default_instance()) delete ceres_scan_matcher_options_;
  if (this != internal_default_instance()) delete motion_filter_options_;
  if (this != internal_default_instance()) delete submaps_options_;
  if (this != internal_default_instance()) delete low_resolution_adaptive_voxel_filter_options_;
  if (this != internal_default_instance()) delete real_time_correlative_scan_matcher_options_;
}

void LocalTrajectoryBuilderOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalTrajectoryBuilderOptions::descriptor() {
  protobuf_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocalTrajectoryBuilderOptions& LocalTrajectoryBuilderOptions::default_instance() {
  protobuf_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  return *internal_default_instance();
}

LocalTrajectoryBuilderOptions* LocalTrajectoryBuilderOptions::New(::google::protobuf::Arena* arena) const {
  LocalTrajectoryBuilderOptions* n = new LocalTrajectoryBuilderOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalTrajectoryBuilderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(high_resolution_adaptive_voxel_filter_options_ != NULL);
      high_resolution_adaptive_voxel_filter_options_->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ceres_scan_matcher_options_ != NULL);
      ceres_scan_matcher_options_->::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(motion_filter_options_ != NULL);
      motion_filter_options_->::cartographer::mapping_3d::proto::MotionFilterOptions::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(submaps_options_ != NULL);
      submaps_options_->::cartographer::mapping_3d::proto::SubmapsOptions::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(low_resolution_adaptive_voxel_filter_options_ != NULL);
      low_resolution_adaptive_voxel_filter_options_->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(real_time_correlative_scan_matcher_options_ != NULL);
      real_time_correlative_scan_matcher_options_->::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions::Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&min_range_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_range_) -
        reinterpret_cast<char*>(&min_range_)) + sizeof(max_range_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&scans_per_accumulation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rotational_histogram_size_) -
        reinterpret_cast<char*>(&scans_per_accumulation_)) + sizeof(rotational_histogram_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocalTrajectoryBuilderOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min_range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_min_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_max_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 scans_per_accumulation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_scans_per_accumulation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scans_per_accumulation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float voxel_filter_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_voxel_filter_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voxel_filter_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_high_resolution_adaptive_voxel_filter_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ceres_scan_matcher_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.mapping_3d.proto.MotionFilterOptions motion_filter_options = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motion_filter_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.mapping_3d.proto.SubmapsOptions submaps_options = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submaps_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_low_resolution_adaptive_voxel_filter_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_online_correlative_scan_matching = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_use_online_correlative_scan_matching();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_online_correlative_scan_matching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cartographer.mapping_2d.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_real_time_correlative_scan_matcher_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double imu_gravity_time_constant = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_imu_gravity_time_constant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &imu_gravity_time_constant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rotational_histogram_size = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_rotational_histogram_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rotational_histogram_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions)
  return false;
#undef DO_
}

void LocalTrajectoryBuilderOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_range = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_range(), output);
  }

  // optional float max_range = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_range(), output);
  }

  // optional int32 scans_per_accumulation = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->scans_per_accumulation(), output);
  }

  // optional float voxel_filter_size = 4;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->voxel_filter_size(), output);
  }

  // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->high_resolution_adaptive_voxel_filter_options_, output);
  }

  // optional .cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->ceres_scan_matcher_options_, output);
  }

  // optional .cartographer.mapping_3d.proto.MotionFilterOptions motion_filter_options = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->motion_filter_options_, output);
  }

  // optional .cartographer.mapping_3d.proto.SubmapsOptions submaps_options = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->submaps_options_, output);
  }

  // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->low_resolution_adaptive_voxel_filter_options_, output);
  }

  // optional bool use_online_correlative_scan_matching = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->use_online_correlative_scan_matching(), output);
  }

  // optional .cartographer.mapping_2d.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->real_time_correlative_scan_matcher_options_, output);
  }

  // optional double imu_gravity_time_constant = 15;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->imu_gravity_time_constant(), output);
  }

  // optional int32 rotational_histogram_size = 17;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->rotational_histogram_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions)
}

::google::protobuf::uint8* LocalTrajectoryBuilderOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_range = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_range(), target);
  }

  // optional float max_range = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_range(), target);
  }

  // optional int32 scans_per_accumulation = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->scans_per_accumulation(), target);
  }

  // optional float voxel_filter_size = 4;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->voxel_filter_size(), target);
  }

  // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->high_resolution_adaptive_voxel_filter_options_, deterministic, target);
  }

  // optional .cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->ceres_scan_matcher_options_, deterministic, target);
  }

  // optional .cartographer.mapping_3d.proto.MotionFilterOptions motion_filter_options = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->motion_filter_options_, deterministic, target);
  }

  // optional .cartographer.mapping_3d.proto.SubmapsOptions submaps_options = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->submaps_options_, deterministic, target);
  }

  // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->low_resolution_adaptive_voxel_filter_options_, deterministic, target);
  }

  // optional bool use_online_correlative_scan_matching = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->use_online_correlative_scan_matching(), target);
  }

  // optional .cartographer.mapping_2d.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 14;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->real_time_correlative_scan_matcher_options_, deterministic, target);
  }

  // optional double imu_gravity_time_constant = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->imu_gravity_time_constant(), target);
  }

  // optional int32 rotational_histogram_size = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->rotational_histogram_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions)
  return target;
}

size_t LocalTrajectoryBuilderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options = 5;
    if (has_high_resolution_adaptive_voxel_filter_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->high_resolution_adaptive_voxel_filter_options_);
    }

    // optional .cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 6;
    if (has_ceres_scan_matcher_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ceres_scan_matcher_options_);
    }

    // optional .cartographer.mapping_3d.proto.MotionFilterOptions motion_filter_options = 7;
    if (has_motion_filter_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->motion_filter_options_);
    }

    // optional .cartographer.mapping_3d.proto.SubmapsOptions submaps_options = 8;
    if (has_submaps_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->submaps_options_);
    }

    // optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options = 12;
    if (has_low_resolution_adaptive_voxel_filter_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->low_resolution_adaptive_voxel_filter_options_);
    }

    // optional .cartographer.mapping_2d.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 14;
    if (has_real_time_correlative_scan_matcher_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->real_time_correlative_scan_matcher_options_);
    }

    // optional float min_range = 1;
    if (has_min_range()) {
      total_size += 1 + 4;
    }

    // optional float max_range = 2;
    if (has_max_range()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional int32 scans_per_accumulation = 3;
    if (has_scans_per_accumulation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scans_per_accumulation());
    }

    // optional float voxel_filter_size = 4;
    if (has_voxel_filter_size()) {
      total_size += 1 + 4;
    }

    // optional double imu_gravity_time_constant = 15;
    if (has_imu_gravity_time_constant()) {
      total_size += 1 + 8;
    }

    // optional bool use_online_correlative_scan_matching = 13;
    if (has_use_online_correlative_scan_matching()) {
      total_size += 1 + 1;
    }

    // optional int32 rotational_histogram_size = 17;
    if (has_rotational_histogram_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rotational_histogram_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalTrajectoryBuilderOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalTrajectoryBuilderOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalTrajectoryBuilderOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions)
    MergeFrom(*source);
  }
}

void LocalTrajectoryBuilderOptions::MergeFrom(const LocalTrajectoryBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_high_resolution_adaptive_voxel_filter_options()->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::MergeFrom(from.high_resolution_adaptive_voxel_filter_options());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ceres_scan_matcher_options()->::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions::MergeFrom(from.ceres_scan_matcher_options());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_motion_filter_options()->::cartographer::mapping_3d::proto::MotionFilterOptions::MergeFrom(from.motion_filter_options());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_submaps_options()->::cartographer::mapping_3d::proto::SubmapsOptions::MergeFrom(from.submaps_options());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_low_resolution_adaptive_voxel_filter_options()->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::MergeFrom(from.low_resolution_adaptive_voxel_filter_options());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_real_time_correlative_scan_matcher_options()->::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions::MergeFrom(from.real_time_correlative_scan_matcher_options());
    }
    if (cached_has_bits & 0x00000040u) {
      min_range_ = from.min_range_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_range_ = from.max_range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      scans_per_accumulation_ = from.scans_per_accumulation_;
    }
    if (cached_has_bits & 0x00000200u) {
      voxel_filter_size_ = from.voxel_filter_size_;
    }
    if (cached_has_bits & 0x00000400u) {
      imu_gravity_time_constant_ = from.imu_gravity_time_constant_;
    }
    if (cached_has_bits & 0x00000800u) {
      use_online_correlative_scan_matching_ = from.use_online_correlative_scan_matching_;
    }
    if (cached_has_bits & 0x00001000u) {
      rotational_histogram_size_ = from.rotational_histogram_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocalTrajectoryBuilderOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalTrajectoryBuilderOptions::CopyFrom(const LocalTrajectoryBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTrajectoryBuilderOptions::IsInitialized() const {
  return true;
}

void LocalTrajectoryBuilderOptions::Swap(LocalTrajectoryBuilderOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalTrajectoryBuilderOptions::InternalSwap(LocalTrajectoryBuilderOptions* other) {
  using std::swap;
  swap(high_resolution_adaptive_voxel_filter_options_, other->high_resolution_adaptive_voxel_filter_options_);
  swap(ceres_scan_matcher_options_, other->ceres_scan_matcher_options_);
  swap(motion_filter_options_, other->motion_filter_options_);
  swap(submaps_options_, other->submaps_options_);
  swap(low_resolution_adaptive_voxel_filter_options_, other->low_resolution_adaptive_voxel_filter_options_);
  swap(real_time_correlative_scan_matcher_options_, other->real_time_correlative_scan_matcher_options_);
  swap(min_range_, other->min_range_);
  swap(max_range_, other->max_range_);
  swap(scans_per_accumulation_, other->scans_per_accumulation_);
  swap(voxel_filter_size_, other->voxel_filter_size_);
  swap(imu_gravity_time_constant_, other->imu_gravity_time_constant_);
  swap(use_online_correlative_scan_matching_, other->use_online_correlative_scan_matching_);
  swap(rotational_histogram_size_, other->rotational_histogram_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalTrajectoryBuilderOptions::GetMetadata() const {
  protobuf_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_5f3d_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalTrajectoryBuilderOptions

// optional float min_range = 1;
bool LocalTrajectoryBuilderOptions::has_min_range() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LocalTrajectoryBuilderOptions::set_has_min_range() {
  _has_bits_[0] |= 0x00000040u;
}
void LocalTrajectoryBuilderOptions::clear_has_min_range() {
  _has_bits_[0] &= ~0x00000040u;
}
void LocalTrajectoryBuilderOptions::clear_min_range() {
  min_range_ = 0;
  clear_has_min_range();
}
float LocalTrajectoryBuilderOptions::min_range() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.min_range)
  return min_range_;
}
void LocalTrajectoryBuilderOptions::set_min_range(float value) {
  set_has_min_range();
  min_range_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.min_range)
}

// optional float max_range = 2;
bool LocalTrajectoryBuilderOptions::has_max_range() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LocalTrajectoryBuilderOptions::set_has_max_range() {
  _has_bits_[0] |= 0x00000080u;
}
void LocalTrajectoryBuilderOptions::clear_has_max_range() {
  _has_bits_[0] &= ~0x00000080u;
}
void LocalTrajectoryBuilderOptions::clear_max_range() {
  max_range_ = 0;
  clear_has_max_range();
}
float LocalTrajectoryBuilderOptions::max_range() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.max_range)
  return max_range_;
}
void LocalTrajectoryBuilderOptions::set_max_range(float value) {
  set_has_max_range();
  max_range_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.max_range)
}

// optional int32 scans_per_accumulation = 3;
bool LocalTrajectoryBuilderOptions::has_scans_per_accumulation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LocalTrajectoryBuilderOptions::set_has_scans_per_accumulation() {
  _has_bits_[0] |= 0x00000100u;
}
void LocalTrajectoryBuilderOptions::clear_has_scans_per_accumulation() {
  _has_bits_[0] &= ~0x00000100u;
}
void LocalTrajectoryBuilderOptions::clear_scans_per_accumulation() {
  scans_per_accumulation_ = 0;
  clear_has_scans_per_accumulation();
}
::google::protobuf::int32 LocalTrajectoryBuilderOptions::scans_per_accumulation() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.scans_per_accumulation)
  return scans_per_accumulation_;
}
void LocalTrajectoryBuilderOptions::set_scans_per_accumulation(::google::protobuf::int32 value) {
  set_has_scans_per_accumulation();
  scans_per_accumulation_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.scans_per_accumulation)
}

// optional float voxel_filter_size = 4;
bool LocalTrajectoryBuilderOptions::has_voxel_filter_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LocalTrajectoryBuilderOptions::set_has_voxel_filter_size() {
  _has_bits_[0] |= 0x00000200u;
}
void LocalTrajectoryBuilderOptions::clear_has_voxel_filter_size() {
  _has_bits_[0] &= ~0x00000200u;
}
void LocalTrajectoryBuilderOptions::clear_voxel_filter_size() {
  voxel_filter_size_ = 0;
  clear_has_voxel_filter_size();
}
float LocalTrajectoryBuilderOptions::voxel_filter_size() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.voxel_filter_size)
  return voxel_filter_size_;
}
void LocalTrajectoryBuilderOptions::set_voxel_filter_size(float value) {
  set_has_voxel_filter_size();
  voxel_filter_size_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.voxel_filter_size)
}

// optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options = 5;
bool LocalTrajectoryBuilderOptions::has_high_resolution_adaptive_voxel_filter_options() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LocalTrajectoryBuilderOptions::set_has_high_resolution_adaptive_voxel_filter_options() {
  _has_bits_[0] |= 0x00000001u;
}
void LocalTrajectoryBuilderOptions::clear_has_high_resolution_adaptive_voxel_filter_options() {
  _has_bits_[0] &= ~0x00000001u;
}
void LocalTrajectoryBuilderOptions::clear_high_resolution_adaptive_voxel_filter_options() {
  if (high_resolution_adaptive_voxel_filter_options_ != NULL) high_resolution_adaptive_voxel_filter_options_->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::Clear();
  clear_has_high_resolution_adaptive_voxel_filter_options();
}
const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& LocalTrajectoryBuilderOptions::high_resolution_adaptive_voxel_filter_options() const {
  const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* p = high_resolution_adaptive_voxel_filter_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.high_resolution_adaptive_voxel_filter_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions*>(
      &::cartographer::sensor::proto::_AdaptiveVoxelFilterOptions_default_instance_);
}
::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions::mutable_high_resolution_adaptive_voxel_filter_options() {
  set_has_high_resolution_adaptive_voxel_filter_options();
  if (high_resolution_adaptive_voxel_filter_options_ == NULL) {
    high_resolution_adaptive_voxel_filter_options_ = new ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.high_resolution_adaptive_voxel_filter_options)
  return high_resolution_adaptive_voxel_filter_options_;
}
::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions::release_high_resolution_adaptive_voxel_filter_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.high_resolution_adaptive_voxel_filter_options)
  clear_has_high_resolution_adaptive_voxel_filter_options();
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* temp = high_resolution_adaptive_voxel_filter_options_;
  high_resolution_adaptive_voxel_filter_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions::set_allocated_high_resolution_adaptive_voxel_filter_options(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* high_resolution_adaptive_voxel_filter_options) {
  delete high_resolution_adaptive_voxel_filter_options_;
  high_resolution_adaptive_voxel_filter_options_ = high_resolution_adaptive_voxel_filter_options;
  if (high_resolution_adaptive_voxel_filter_options) {
    set_has_high_resolution_adaptive_voxel_filter_options();
  } else {
    clear_has_high_resolution_adaptive_voxel_filter_options();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.high_resolution_adaptive_voxel_filter_options)
}

// optional .cartographer.sensor.proto.AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options = 12;
bool LocalTrajectoryBuilderOptions::has_low_resolution_adaptive_voxel_filter_options() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LocalTrajectoryBuilderOptions::set_has_low_resolution_adaptive_voxel_filter_options() {
  _has_bits_[0] |= 0x00000010u;
}
void LocalTrajectoryBuilderOptions::clear_has_low_resolution_adaptive_voxel_filter_options() {
  _has_bits_[0] &= ~0x00000010u;
}
void LocalTrajectoryBuilderOptions::clear_low_resolution_adaptive_voxel_filter_options() {
  if (low_resolution_adaptive_voxel_filter_options_ != NULL) low_resolution_adaptive_voxel_filter_options_->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::Clear();
  clear_has_low_resolution_adaptive_voxel_filter_options();
}
const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& LocalTrajectoryBuilderOptions::low_resolution_adaptive_voxel_filter_options() const {
  const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* p = low_resolution_adaptive_voxel_filter_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.low_resolution_adaptive_voxel_filter_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions*>(
      &::cartographer::sensor::proto::_AdaptiveVoxelFilterOptions_default_instance_);
}
::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions::mutable_low_resolution_adaptive_voxel_filter_options() {
  set_has_low_resolution_adaptive_voxel_filter_options();
  if (low_resolution_adaptive_voxel_filter_options_ == NULL) {
    low_resolution_adaptive_voxel_filter_options_ = new ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.low_resolution_adaptive_voxel_filter_options)
  return low_resolution_adaptive_voxel_filter_options_;
}
::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions::release_low_resolution_adaptive_voxel_filter_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.low_resolution_adaptive_voxel_filter_options)
  clear_has_low_resolution_adaptive_voxel_filter_options();
  ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* temp = low_resolution_adaptive_voxel_filter_options_;
  low_resolution_adaptive_voxel_filter_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions::set_allocated_low_resolution_adaptive_voxel_filter_options(::cartographer::sensor::proto::AdaptiveVoxelFilterOptions* low_resolution_adaptive_voxel_filter_options) {
  delete low_resolution_adaptive_voxel_filter_options_;
  low_resolution_adaptive_voxel_filter_options_ = low_resolution_adaptive_voxel_filter_options;
  if (low_resolution_adaptive_voxel_filter_options) {
    set_has_low_resolution_adaptive_voxel_filter_options();
  } else {
    clear_has_low_resolution_adaptive_voxel_filter_options();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.low_resolution_adaptive_voxel_filter_options)
}

// optional bool use_online_correlative_scan_matching = 13;
bool LocalTrajectoryBuilderOptions::has_use_online_correlative_scan_matching() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void LocalTrajectoryBuilderOptions::set_has_use_online_correlative_scan_matching() {
  _has_bits_[0] |= 0x00000800u;
}
void LocalTrajectoryBuilderOptions::clear_has_use_online_correlative_scan_matching() {
  _has_bits_[0] &= ~0x00000800u;
}
void LocalTrajectoryBuilderOptions::clear_use_online_correlative_scan_matching() {
  use_online_correlative_scan_matching_ = false;
  clear_has_use_online_correlative_scan_matching();
}
bool LocalTrajectoryBuilderOptions::use_online_correlative_scan_matching() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.use_online_correlative_scan_matching)
  return use_online_correlative_scan_matching_;
}
void LocalTrajectoryBuilderOptions::set_use_online_correlative_scan_matching(bool value) {
  set_has_use_online_correlative_scan_matching();
  use_online_correlative_scan_matching_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.use_online_correlative_scan_matching)
}

// optional .cartographer.mapping_2d.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 14;
bool LocalTrajectoryBuilderOptions::has_real_time_correlative_scan_matcher_options() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LocalTrajectoryBuilderOptions::set_has_real_time_correlative_scan_matcher_options() {
  _has_bits_[0] |= 0x00000020u;
}
void LocalTrajectoryBuilderOptions::clear_has_real_time_correlative_scan_matcher_options() {
  _has_bits_[0] &= ~0x00000020u;
}
void LocalTrajectoryBuilderOptions::clear_real_time_correlative_scan_matcher_options() {
  if (real_time_correlative_scan_matcher_options_ != NULL) real_time_correlative_scan_matcher_options_->::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions::Clear();
  clear_has_real_time_correlative_scan_matcher_options();
}
const ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions& LocalTrajectoryBuilderOptions::real_time_correlative_scan_matcher_options() const {
  const ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* p = real_time_correlative_scan_matcher_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.real_time_correlative_scan_matcher_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions*>(
      &::cartographer::mapping_2d::scan_matching::proto::_RealTimeCorrelativeScanMatcherOptions_default_instance_);
}
::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* LocalTrajectoryBuilderOptions::mutable_real_time_correlative_scan_matcher_options() {
  set_has_real_time_correlative_scan_matcher_options();
  if (real_time_correlative_scan_matcher_options_ == NULL) {
    real_time_correlative_scan_matcher_options_ = new ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.real_time_correlative_scan_matcher_options)
  return real_time_correlative_scan_matcher_options_;
}
::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* LocalTrajectoryBuilderOptions::release_real_time_correlative_scan_matcher_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.real_time_correlative_scan_matcher_options)
  clear_has_real_time_correlative_scan_matcher_options();
  ::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* temp = real_time_correlative_scan_matcher_options_;
  real_time_correlative_scan_matcher_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions::set_allocated_real_time_correlative_scan_matcher_options(::cartographer::mapping_2d::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* real_time_correlative_scan_matcher_options) {
  delete real_time_correlative_scan_matcher_options_;
  real_time_correlative_scan_matcher_options_ = real_time_correlative_scan_matcher_options;
  if (real_time_correlative_scan_matcher_options) {
    set_has_real_time_correlative_scan_matcher_options();
  } else {
    clear_has_real_time_correlative_scan_matcher_options();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.real_time_correlative_scan_matcher_options)
}

// optional .cartographer.mapping_3d.scan_matching.proto.CeresScanMatcherOptions ceres_scan_matcher_options = 6;
bool LocalTrajectoryBuilderOptions::has_ceres_scan_matcher_options() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LocalTrajectoryBuilderOptions::set_has_ceres_scan_matcher_options() {
  _has_bits_[0] |= 0x00000002u;
}
void LocalTrajectoryBuilderOptions::clear_has_ceres_scan_matcher_options() {
  _has_bits_[0] &= ~0x00000002u;
}
void LocalTrajectoryBuilderOptions::clear_ceres_scan_matcher_options() {
  if (ceres_scan_matcher_options_ != NULL) ceres_scan_matcher_options_->::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions::Clear();
  clear_has_ceres_scan_matcher_options();
}
const ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions& LocalTrajectoryBuilderOptions::ceres_scan_matcher_options() const {
  const ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* p = ceres_scan_matcher_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.ceres_scan_matcher_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions*>(
      &::cartographer::mapping_3d::scan_matching::proto::_CeresScanMatcherOptions_default_instance_);
}
::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* LocalTrajectoryBuilderOptions::mutable_ceres_scan_matcher_options() {
  set_has_ceres_scan_matcher_options();
  if (ceres_scan_matcher_options_ == NULL) {
    ceres_scan_matcher_options_ = new ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.ceres_scan_matcher_options)
  return ceres_scan_matcher_options_;
}
::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* LocalTrajectoryBuilderOptions::release_ceres_scan_matcher_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.ceres_scan_matcher_options)
  clear_has_ceres_scan_matcher_options();
  ::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* temp = ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions::set_allocated_ceres_scan_matcher_options(::cartographer::mapping_3d::scan_matching::proto::CeresScanMatcherOptions* ceres_scan_matcher_options) {
  delete ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = ceres_scan_matcher_options;
  if (ceres_scan_matcher_options) {
    set_has_ceres_scan_matcher_options();
  } else {
    clear_has_ceres_scan_matcher_options();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.ceres_scan_matcher_options)
}

// optional .cartographer.mapping_3d.proto.MotionFilterOptions motion_filter_options = 7;
bool LocalTrajectoryBuilderOptions::has_motion_filter_options() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LocalTrajectoryBuilderOptions::set_has_motion_filter_options() {
  _has_bits_[0] |= 0x00000004u;
}
void LocalTrajectoryBuilderOptions::clear_has_motion_filter_options() {
  _has_bits_[0] &= ~0x00000004u;
}
void LocalTrajectoryBuilderOptions::clear_motion_filter_options() {
  if (motion_filter_options_ != NULL) motion_filter_options_->::cartographer::mapping_3d::proto::MotionFilterOptions::Clear();
  clear_has_motion_filter_options();
}
const ::cartographer::mapping_3d::proto::MotionFilterOptions& LocalTrajectoryBuilderOptions::motion_filter_options() const {
  const ::cartographer::mapping_3d::proto::MotionFilterOptions* p = motion_filter_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.motion_filter_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping_3d::proto::MotionFilterOptions*>(
      &::cartographer::mapping_3d::proto::_MotionFilterOptions_default_instance_);
}
::cartographer::mapping_3d::proto::MotionFilterOptions* LocalTrajectoryBuilderOptions::mutable_motion_filter_options() {
  set_has_motion_filter_options();
  if (motion_filter_options_ == NULL) {
    motion_filter_options_ = new ::cartographer::mapping_3d::proto::MotionFilterOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.motion_filter_options)
  return motion_filter_options_;
}
::cartographer::mapping_3d::proto::MotionFilterOptions* LocalTrajectoryBuilderOptions::release_motion_filter_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.motion_filter_options)
  clear_has_motion_filter_options();
  ::cartographer::mapping_3d::proto::MotionFilterOptions* temp = motion_filter_options_;
  motion_filter_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions::set_allocated_motion_filter_options(::cartographer::mapping_3d::proto::MotionFilterOptions* motion_filter_options) {
  delete motion_filter_options_;
  motion_filter_options_ = motion_filter_options;
  if (motion_filter_options) {
    set_has_motion_filter_options();
  } else {
    clear_has_motion_filter_options();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.motion_filter_options)
}

// optional double imu_gravity_time_constant = 15;
bool LocalTrajectoryBuilderOptions::has_imu_gravity_time_constant() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void LocalTrajectoryBuilderOptions::set_has_imu_gravity_time_constant() {
  _has_bits_[0] |= 0x00000400u;
}
void LocalTrajectoryBuilderOptions::clear_has_imu_gravity_time_constant() {
  _has_bits_[0] &= ~0x00000400u;
}
void LocalTrajectoryBuilderOptions::clear_imu_gravity_time_constant() {
  imu_gravity_time_constant_ = 0;
  clear_has_imu_gravity_time_constant();
}
double LocalTrajectoryBuilderOptions::imu_gravity_time_constant() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.imu_gravity_time_constant)
  return imu_gravity_time_constant_;
}
void LocalTrajectoryBuilderOptions::set_imu_gravity_time_constant(double value) {
  set_has_imu_gravity_time_constant();
  imu_gravity_time_constant_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.imu_gravity_time_constant)
}

// optional int32 rotational_histogram_size = 17;
bool LocalTrajectoryBuilderOptions::has_rotational_histogram_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void LocalTrajectoryBuilderOptions::set_has_rotational_histogram_size() {
  _has_bits_[0] |= 0x00001000u;
}
void LocalTrajectoryBuilderOptions::clear_has_rotational_histogram_size() {
  _has_bits_[0] &= ~0x00001000u;
}
void LocalTrajectoryBuilderOptions::clear_rotational_histogram_size() {
  rotational_histogram_size_ = 0;
  clear_has_rotational_histogram_size();
}
::google::protobuf::int32 LocalTrajectoryBuilderOptions::rotational_histogram_size() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.rotational_histogram_size)
  return rotational_histogram_size_;
}
void LocalTrajectoryBuilderOptions::set_rotational_histogram_size(::google::protobuf::int32 value) {
  set_has_rotational_histogram_size();
  rotational_histogram_size_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.rotational_histogram_size)
}

// optional .cartographer.mapping_3d.proto.SubmapsOptions submaps_options = 8;
bool LocalTrajectoryBuilderOptions::has_submaps_options() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LocalTrajectoryBuilderOptions::set_has_submaps_options() {
  _has_bits_[0] |= 0x00000008u;
}
void LocalTrajectoryBuilderOptions::clear_has_submaps_options() {
  _has_bits_[0] &= ~0x00000008u;
}
void LocalTrajectoryBuilderOptions::clear_submaps_options() {
  if (submaps_options_ != NULL) submaps_options_->::cartographer::mapping_3d::proto::SubmapsOptions::Clear();
  clear_has_submaps_options();
}
const ::cartographer::mapping_3d::proto::SubmapsOptions& LocalTrajectoryBuilderOptions::submaps_options() const {
  const ::cartographer::mapping_3d::proto::SubmapsOptions* p = submaps_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.submaps_options)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping_3d::proto::SubmapsOptions*>(
      &::cartographer::mapping_3d::proto::_SubmapsOptions_default_instance_);
}
::cartographer::mapping_3d::proto::SubmapsOptions* LocalTrajectoryBuilderOptions::mutable_submaps_options() {
  set_has_submaps_options();
  if (submaps_options_ == NULL) {
    submaps_options_ = new ::cartographer::mapping_3d::proto::SubmapsOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.submaps_options)
  return submaps_options_;
}
::cartographer::mapping_3d::proto::SubmapsOptions* LocalTrajectoryBuilderOptions::release_submaps_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.submaps_options)
  clear_has_submaps_options();
  ::cartographer::mapping_3d::proto::SubmapsOptions* temp = submaps_options_;
  submaps_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions::set_allocated_submaps_options(::cartographer::mapping_3d::proto::SubmapsOptions* submaps_options) {
  delete submaps_options_;
  submaps_options_ = submaps_options;
  if (submaps_options) {
    set_has_submaps_options();
  } else {
    clear_has_submaps_options();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_3d.proto.LocalTrajectoryBuilderOptions.submaps_options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping_3d
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
