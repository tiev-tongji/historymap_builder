// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping_2d/proto/probability_grid.proto

#ifndef PROTOBUF_cartographer_2fmapping_5f2d_2fproto_2fprobability_5fgrid_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_5f2d_2fproto_2fprobability_5fgrid_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping_2d/proto/map_limits.pb.h"
// @@protoc_insertion_point(includes)
namespace cartographer {
namespace mapping_2d {
namespace proto {
class ProbabilityGrid;
class ProbabilityGridDefaultTypeInternal;
extern ProbabilityGridDefaultTypeInternal _ProbabilityGrid_default_instance_;
}  // namespace proto
}  // namespace mapping_2d
}  // namespace cartographer

namespace cartographer {
namespace mapping_2d {
namespace proto {

namespace protobuf_cartographer_2fmapping_5f2d_2fproto_2fprobability_5fgrid_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cartographer_2fmapping_5f2d_2fproto_2fprobability_5fgrid_2eproto

// ===================================================================

class ProbabilityGrid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping_2d.proto.ProbabilityGrid) */ {
 public:
  ProbabilityGrid();
  virtual ~ProbabilityGrid();

  ProbabilityGrid(const ProbabilityGrid& from);

  inline ProbabilityGrid& operator=(const ProbabilityGrid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProbabilityGrid(ProbabilityGrid&& from) noexcept
    : ProbabilityGrid() {
    *this = ::std::move(from);
  }

  inline ProbabilityGrid& operator=(ProbabilityGrid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProbabilityGrid& default_instance();

  static inline const ProbabilityGrid* internal_default_instance() {
    return reinterpret_cast<const ProbabilityGrid*>(
               &_ProbabilityGrid_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ProbabilityGrid* other);
  friend void swap(ProbabilityGrid& a, ProbabilityGrid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProbabilityGrid* New() const PROTOBUF_FINAL { return New(NULL); }

  ProbabilityGrid* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProbabilityGrid& from);
  void MergeFrom(const ProbabilityGrid& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProbabilityGrid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 cells = 2;
  int cells_size() const;
  void clear_cells();
  static const int kCellsFieldNumber = 2;
  ::google::protobuf::int32 cells(int index) const;
  void set_cells(int index, ::google::protobuf::int32 value);
  void add_cells(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cells() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cells();

  // optional .cartographer.mapping_2d.proto.MapLimits limits = 1;
  bool has_limits() const;
  void clear_limits();
  static const int kLimitsFieldNumber = 1;
  const ::cartographer::mapping_2d::proto::MapLimits& limits() const;
  ::cartographer::mapping_2d::proto::MapLimits* mutable_limits();
  ::cartographer::mapping_2d::proto::MapLimits* release_limits();
  void set_allocated_limits(::cartographer::mapping_2d::proto::MapLimits* limits);

  // optional int32 max_x = 4;
  bool has_max_x() const;
  void clear_max_x();
  static const int kMaxXFieldNumber = 4;
  ::google::protobuf::int32 max_x() const;
  void set_max_x(::google::protobuf::int32 value);

  // optional int32 max_y = 5;
  bool has_max_y() const;
  void clear_max_y();
  static const int kMaxYFieldNumber = 5;
  ::google::protobuf::int32 max_y() const;
  void set_max_y(::google::protobuf::int32 value);

  // optional int32 min_x = 6;
  bool has_min_x() const;
  void clear_min_x();
  static const int kMinXFieldNumber = 6;
  ::google::protobuf::int32 min_x() const;
  void set_min_x(::google::protobuf::int32 value);

  // optional int32 min_y = 7;
  bool has_min_y() const;
  void clear_min_y();
  static const int kMinYFieldNumber = 7;
  ::google::protobuf::int32 min_y() const;
  void set_min_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping_2d.proto.ProbabilityGrid)
 private:
  void set_has_limits();
  void clear_has_limits();
  void set_has_max_x();
  void clear_has_max_x();
  void set_has_max_y();
  void clear_has_max_y();
  void set_has_min_x();
  void clear_has_min_x();
  void set_has_min_y();
  void clear_has_min_y();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cells_;
  ::cartographer::mapping_2d::proto::MapLimits* limits_;
  ::google::protobuf::int32 max_x_;
  ::google::protobuf::int32 max_y_;
  ::google::protobuf::int32 min_x_;
  ::google::protobuf::int32 min_y_;
  friend struct protobuf_cartographer_2fmapping_5f2d_2fproto_2fprobability_5fgrid_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProbabilityGrid

// optional .cartographer.mapping_2d.proto.MapLimits limits = 1;
inline bool ProbabilityGrid::has_limits() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProbabilityGrid::set_has_limits() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProbabilityGrid::clear_has_limits() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProbabilityGrid::clear_limits() {
  if (limits_ != NULL) limits_->::cartographer::mapping_2d::proto::MapLimits::Clear();
  clear_has_limits();
}
inline const ::cartographer::mapping_2d::proto::MapLimits& ProbabilityGrid::limits() const {
  const ::cartographer::mapping_2d::proto::MapLimits* p = limits_;
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.ProbabilityGrid.limits)
  return p != NULL ? *p : *reinterpret_cast<const ::cartographer::mapping_2d::proto::MapLimits*>(
      &::cartographer::mapping_2d::proto::_MapLimits_default_instance_);
}
inline ::cartographer::mapping_2d::proto::MapLimits* ProbabilityGrid::mutable_limits() {
  set_has_limits();
  if (limits_ == NULL) {
    limits_ = new ::cartographer::mapping_2d::proto::MapLimits;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping_2d.proto.ProbabilityGrid.limits)
  return limits_;
}
inline ::cartographer::mapping_2d::proto::MapLimits* ProbabilityGrid::release_limits() {
  // @@protoc_insertion_point(field_release:cartographer.mapping_2d.proto.ProbabilityGrid.limits)
  clear_has_limits();
  ::cartographer::mapping_2d::proto::MapLimits* temp = limits_;
  limits_ = NULL;
  return temp;
}
inline void ProbabilityGrid::set_allocated_limits(::cartographer::mapping_2d::proto::MapLimits* limits) {
  delete limits_;
  limits_ = limits;
  if (limits) {
    set_has_limits();
  } else {
    clear_has_limits();
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping_2d.proto.ProbabilityGrid.limits)
}

// repeated int32 cells = 2;
inline int ProbabilityGrid::cells_size() const {
  return cells_.size();
}
inline void ProbabilityGrid::clear_cells() {
  cells_.Clear();
}
inline ::google::protobuf::int32 ProbabilityGrid::cells(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.ProbabilityGrid.cells)
  return cells_.Get(index);
}
inline void ProbabilityGrid::set_cells(int index, ::google::protobuf::int32 value) {
  cells_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.mapping_2d.proto.ProbabilityGrid.cells)
}
inline void ProbabilityGrid::add_cells(::google::protobuf::int32 value) {
  cells_.Add(value);
  // @@protoc_insertion_point(field_add:cartographer.mapping_2d.proto.ProbabilityGrid.cells)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProbabilityGrid::cells() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping_2d.proto.ProbabilityGrid.cells)
  return cells_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProbabilityGrid::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping_2d.proto.ProbabilityGrid.cells)
  return &cells_;
}

// optional int32 max_x = 4;
inline bool ProbabilityGrid::has_max_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProbabilityGrid::set_has_max_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProbabilityGrid::clear_has_max_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProbabilityGrid::clear_max_x() {
  max_x_ = 0;
  clear_has_max_x();
}
inline ::google::protobuf::int32 ProbabilityGrid::max_x() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.ProbabilityGrid.max_x)
  return max_x_;
}
inline void ProbabilityGrid::set_max_x(::google::protobuf::int32 value) {
  set_has_max_x();
  max_x_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_2d.proto.ProbabilityGrid.max_x)
}

// optional int32 max_y = 5;
inline bool ProbabilityGrid::has_max_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProbabilityGrid::set_has_max_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProbabilityGrid::clear_has_max_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProbabilityGrid::clear_max_y() {
  max_y_ = 0;
  clear_has_max_y();
}
inline ::google::protobuf::int32 ProbabilityGrid::max_y() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.ProbabilityGrid.max_y)
  return max_y_;
}
inline void ProbabilityGrid::set_max_y(::google::protobuf::int32 value) {
  set_has_max_y();
  max_y_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_2d.proto.ProbabilityGrid.max_y)
}

// optional int32 min_x = 6;
inline bool ProbabilityGrid::has_min_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProbabilityGrid::set_has_min_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProbabilityGrid::clear_has_min_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProbabilityGrid::clear_min_x() {
  min_x_ = 0;
  clear_has_min_x();
}
inline ::google::protobuf::int32 ProbabilityGrid::min_x() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.ProbabilityGrid.min_x)
  return min_x_;
}
inline void ProbabilityGrid::set_min_x(::google::protobuf::int32 value) {
  set_has_min_x();
  min_x_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_2d.proto.ProbabilityGrid.min_x)
}

// optional int32 min_y = 7;
inline bool ProbabilityGrid::has_min_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProbabilityGrid::set_has_min_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProbabilityGrid::clear_has_min_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProbabilityGrid::clear_min_y() {
  min_y_ = 0;
  clear_has_min_y();
}
inline ::google::protobuf::int32 ProbabilityGrid::min_y() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping_2d.proto.ProbabilityGrid.min_y)
  return min_y_;
}
inline void ProbabilityGrid::set_min_y(::google::protobuf::int32 value) {
  set_has_min_y();
  min_y_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping_2d.proto.ProbabilityGrid.min_y)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace mapping_2d
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_5f2d_2fproto_2fprobability_5fgrid_2eproto__INCLUDED
