/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by zcm-gen
 **/

#include <zcm/zcm_coretypes.h>

#ifndef __LaneLine_hpp__
#define __LaneLine_hpp__

#include <vector>
#include "LinePoint.hpp"


class LaneLine
{
    public:
        int32_t    line_type;

        float      distance;

        int32_t    num;

        std::vector< LinePoint > points;

    public:
        #if __cplusplus > 199711L /* if c++11 */
        static constexpr int8_t   kTypeDividing = 0x00;
        static constexpr int8_t   kTypeTypeNoPass = 0x01;
        static constexpr int8_t   kTypeOneWayPass = 0x02;
        static constexpr int8_t   kTypeGuiding = 0x03;
        #else
        static const     int8_t   kTypeDividing = 0x00;
        static const     int8_t   kTypeTypeNoPass = 0x01;
        static const     int8_t   kTypeOneWayPass = 0x02;
        static const     int8_t   kTypeGuiding = 0x03;
        #endif

    public:
        /**
         * Destructs a message properly if anything inherits from it
        */
        virtual ~LaneLine() {}

        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void* buf, uint32_t offset, uint32_t maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline uint32_t getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void* buf, uint32_t offset, uint32_t maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "LaneLine"
         */
        inline static const char* getTypeName();

        // ZCM support functions. Users should not call these
        inline int      _encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const;
        inline uint32_t _getEncodedSizeNoHash() const;
        inline int      _decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen);
        inline static uint64_t _computeHash(const __zcm_hash_ptr* p);
};

int LaneLine::encode(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;
    int64_t hash = (int64_t)getHash();

    thislen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int LaneLine::decode(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

uint32_t LaneLine::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t LaneLine::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* LaneLine::getTypeName()
{
    return "LaneLine";
}

int LaneLine::_encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->line_type, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->distance, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->num, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    for (int a0 = 0; a0 < this->num; ++a0) {
        thislen = this->points[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    return pos;
}

int LaneLine::_decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->line_type, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->distance, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->num, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    this->points.resize(this->num);
    for (int a0 = 0; a0 < this->num; ++a0) {
        thislen = this->points[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    return pos;
}

uint32_t LaneLine::_getEncodedSizeNoHash() const
{
    uint32_t enc_size = 0;
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->num; ++a0) {
        enc_size += this->points[a0]._getEncodedSizeNoHash();
    }
    return enc_size;
}

uint64_t LaneLine::_computeHash(const __zcm_hash_ptr* p)
{
    const __zcm_hash_ptr* fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == LaneLine::getHash)
            return 0;
    const __zcm_hash_ptr cp = { p, (void*)LaneLine::getHash };

    uint64_t hash = (uint64_t)0x0a0e1d18725221fbLL +
         LinePoint::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

#endif
